import { memo, useState, useEffect } from "react";
import Layout from "../Layout/Layout";
import "../../css/MedicalReportForm.css";
import diagnosticReportService from '../../services/diagnosticReportService';

const MedicalReportForm = () => {
    const [formData, setFormData] = useState({
        // Nh·∫≠n d·∫°ng b·ªánh nh√¢n
        firstName: '',
        lastName: '',
        dateOfBirth: '',
        gender: '',
        address: '',

        // B√°c sƒ© gi·ªõi thi·ªáu
        referringDoctor: '',
        doctorSpecialty: '',

        // L·ªãch s·ª≠ l√¢m s√†ng
        clinicalHistory: '',
        symptoms: [],

        // Ch·∫©n ƒëo√°n
        diagnosis: '',
        findings: '',
        recommendations: ''
    });

    const [loading, setLoading] = useState(false);
    const [message, setMessage] = useState({ type: '', text: '' });
    const [reportCode, setReportCode] = useState('BC20241211001');
    const [showReportsList, setShowReportsList] = useState(false);

    // Generate report code when component mounts
    useEffect(() => {
        generateNewReportCode();
    }, []);

    const generateNewReportCode = async () => {
        try {
            const response = await diagnosticReportService.generateReportCode();
            if (response.success) {
                setReportCode(response.data);
            } else {
                // Fallback to generated code
                const newCode = `BC${new Date().toISOString().slice(0, 10).replace(/-/g, '')}${String(Math.floor(Math.random() * 1000)).padStart(3, '0')}`;
                setReportCode(newCode);
            }
        } catch (error) {
            console.error('Error generating report code:', error);
            // Fallback to generated code
            const newCode = `BC${new Date().toISOString().slice(0, 10).replace(/-/g, '')}${String(Math.floor(Math.random() * 1000)).padStart(3, '0')}`;
            setReportCode(newCode);
            setMessage({ type: 'error', text: 'Kh√¥ng th·ªÉ t·∫°o m√£ b√°o c√°o t·ª´ server, s·ª≠ d·ª•ng m√£ t·∫°m th·ªùi' });
        }
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleCheckboxChange = (e) => {
        const { name, value, checked } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: checked
                ? [...prev[name], value]
                : prev[name].filter(item => item !== value)
        }));
    };

    const handleCreateReport = async (e) => {
        e.preventDefault();
        setLoading(true);
        setMessage({ type: '', text: '' });

        try {
            // Validate required fields
            if (!formData.firstName || !formData.lastName) {
                throw new Error('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n');
            }

            if (!formData.diagnosis) {
                throw new Error('Vui l√≤ng nh·∫≠p k·∫øt qu·∫£ ch·∫©n ƒëo√°n');
            }

            // Transform form data to API format
            const apiData = diagnosticReportService.transformFormDataToApi(formData);
            apiData.reportCode = reportCode;

            console.log('üöÄ Sending data to API:', apiData);

            // Call real API
            const response = await diagnosticReportService.createReport(apiData);

            if (response.success) {
                setMessage({ type: 'success', text: `B√°o c√°o ${response.data.reportCode} ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v√†o c∆° s·ªü d·ªØ li·ªáu!` });

                // Reset form after successful submission
                setTimeout(() => {
                    resetForm();
                    generateNewReportCode();
                }, 3000);
            } else {
                throw new Error(response.message || 'C√≥ l·ªói x·∫£y ra khi l∆∞u b√°o c√°o');
            }

        } catch (error) {
            console.error('‚ùå Submit error:', error);
            setMessage({ type: 'error', text: `L·ªói: ${error.message}` });
        } finally {
            setLoading(false);
        }
    };

    const handleViewReports = () => {
        setShowReportsList(!showReportsList);
    };

    const resetForm = () => {
        setFormData({
            firstName: '',
            lastName: '',
            dateOfBirth: '',
            gender: '',
            address: '',
            referringDoctor: '',
            doctorSpecialty: '',
            clinicalHistory: '',
            symptoms: [],
            diagnosis: '',
            findings: '',
            recommendations: ''
        });
        setMessage({ type: '', text: '' });
    };

    return (
        <Layout>
            <div className="report-form-page">
                <section className="report-form-section">
                    <h1>üìù Phi·∫øu x√©t nghi·ªám b·ªánh l√Ω</h1>

                    {/* Message Display */}
                    {message.text && (
                        <div className={`message ${message.type === 'success' ? 'message-success' : 'message-error'}`}>
                            {message.text}
                        </div>
                    )}

                    {/* Report Code Display */}
                    {reportCode && (
                        <div className="report-code-display">
                            <strong>M√£ b√°o c√°o: {reportCode}</strong>
                        </div>
                    )}

                    <form className="report-form" onSubmit={handleCreateReport}>
                        {/* Nh·∫≠n d·∫°ng b·ªánh nh√¢n */}
                        <fieldset className="form-group">
                            <legend>üë§ Nh·∫≠n d·∫°ng b·ªánh nh√¢n</legend>

                            <div className="name-group">
                                <label>
                                    T√™n
                                    <input
                                        type="text"
                                        name="firstName"
                                        placeholder="T√™n"
                                        value={formData.firstName}
                                        onChange={handleInputChange}
                                    />
                                </label>
                                <label>
                                    H·ªç
                                    <input
                                        type="text"
                                        name="lastName"
                                        placeholder="H·ªç"
                                        value={formData.lastName}
                                        onChange={handleInputChange}
                                    />
                                </label>
                            </div>

                            <label>
                                Ng√†y sinh
                                <input
                                    type="date"
                                    name="dateOfBirth"
                                    value={formData.dateOfBirth}
                                    onChange={handleInputChange}
                                />
                            </label>

                            <label>
                                Gi·ªõi t√≠nh
                                <select
                                    name="gender"
                                    value={formData.gender}
                                    onChange={handleInputChange}
                                >
                                    <option value="">-- Ch·ªçn gi·ªõi t√≠nh --</option>
                                    <option value="Nam">Nam</option>
                                    <option value="N·ªØ">N·ªØ</option>
                                    <option value="Kh√°c">Kh√°c</option>
                                </select>
                            </label>

                            <label>
                                ƒê·ªãa ch·ªâ
                                <input
                                    type="text"
                                    name="address"
                                    placeholder="123 ƒê∆∞·ªùng ABC, Qu·∫≠n XYZ"
                                    value={formData.address}
                                    onChange={handleInputChange}
                                />
                            </label>
                        </fieldset>

                        {/* B√°c sƒ© gi·ªõi thi·ªáu */}
                        <fieldset className="form-group">
                            <legend>ü©∫ B√°c sƒ© gi·ªõi thi·ªáu</legend>

                            <label>
                                T√™n b√°c sƒ© gi·ªõi thi·ªáu
                                <input
                                    type="text"
                                    name="referringDoctor"
                                    placeholder="BS. Nguy·ªÖn VƒÉn B"
                                    value={formData.referringDoctor}
                                    onChange={handleInputChange}
                                />
                            </label>

                            <label>
                                Chuy√™n khoa
                                <select
                                    name="doctorSpecialty"
                                    value={formData.doctorSpecialty}
                                    onChange={handleInputChange}
                                >
                                    <option value="">-- Ch·ªçn chuy√™n khoa --</option>
                                    <option value="B√°c sƒ© gia ƒë√¨nh">B√°c sƒ© gia ƒë√¨nh</option>
                                    <option value="B√°c sƒ© ph·∫´u thu·∫≠t">B√°c sƒ© ph·∫´u thu·∫≠t</option>
                                    <option value="B√°c sƒ© ung th∆∞">B√°c sƒ© ung th∆∞</option>
                                    <option value="B√°c sƒ© n·ªôi khoa">B√°c sƒ© n·ªôi khoa</option>
                                    <option value="Kh√°c">Kh√°c</option>
                                </select>
                            </label>
                        </fieldset>

                        {/* L·ªãch s·ª≠ l√¢m s√†ng */}
                        <fieldset className="form-group">
                            <legend>üìã L·ªãch s·ª≠ l√¢m s√†ng</legend>

                            <label>
                                Tri·ªáu ch·ª©ng
                                <div className="symptoms-checkboxes">
                                    {['S·ªët', 'ƒêau', 'Kh·ªëi u', 'Vi√™m', 'Kh√°c'].map(symptom => (
                                        <label key={symptom} className="checkbox-label">
                                            <input
                                                type="checkbox"
                                                name="symptoms"
                                                value={symptom}
                                                checked={formData.symptoms.includes(symptom)}
                                                onChange={handleCheckboxChange}
                                            />
                                            {symptom}
                                        </label>
                                    ))}
                                </div>
                            </label>

                            <label>
                                Ghi ch√∫ l√¢m s√†ng
                                <textarea
                                    name="clinicalHistory"
                                    rows="4"
                                    placeholder="V√≠ d·ª•: ho k√©o d√†i, s∆∞ng h·∫°ch c·ªï,..."
                                    value={formData.clinicalHistory}
                                    onChange={handleInputChange}
                                ></textarea>
                            </label>
                        </fieldset>

                        {/* Ch·∫©n ƒëo√°n */}
                        <fieldset className="form-group">
                            <legend>üîç Ch·∫©n ƒëo√°n</legend>

                            <label>
                                K·∫øt qu·∫£ ch·∫©n ƒëo√°n
                                <textarea
                                    name="diagnosis"
                                    rows="4"
                                    placeholder="K·∫øt qu·∫£ x√©t nghi·ªám, ph√°t hi·ªán b·ªánh l√Ω ho·∫∑c b·∫•t th∆∞·ªùng..."
                                    value={formData.diagnosis}
                                    onChange={handleInputChange}
                                ></textarea>
                            </label>

                            <label>
                                C√°c ph√°t hi·ªán chi ti·∫øt
                                <textarea
                                    name="findings"
                                    rows="3"
                                    placeholder="Chi ti·∫øt c√°c ph√°t hi·ªán t·ª´ x√©t nghi·ªám..."
                                    value={formData.findings}
                                    onChange={handleInputChange}
                                ></textarea>
                            </label>

                            <label>
                                Khuy·∫øn ngh·ªã
                                <textarea
                                    name="recommendations"
                                    rows="3"
                                    placeholder="Khuy·∫øn ngh·ªã ƒëi·ªÅu tr·ªã ho·∫∑c theo d√µi..."
                                    value={formData.recommendations}
                                    onChange={handleInputChange}
                                ></textarea>
                            </label>
                        </fieldset>

                        <div className="button-group">
                            <button
                                type="submit"
                                className={`submit-button ${loading ? 'loading' : ''}`}
                                disabled={loading}
                            >
                                {loading ? 'ƒêang t·∫°o...' : 'T·∫°o b√°o c√°o'}
                            </button>

                            <button
                                type="button"
                                className="submit-button view-button"
                                onClick={handleViewReports}
                            >
                                Xem b√°o c√°o
                            </button>

                            {!loading && (
                                <button
                                    type="button"
                                    className="submit-button reset-button"
                                    onClick={resetForm}
                                >
                                    L√†m m·ªõi
                                </button>
                            )}
                        </div>
                    </form>

                    {/* Reports List Section */}
                    {showReportsList && (
                        <div className="reports-list-section">
                            <h2>üìã Danh s√°ch b√°o c√°o</h2>
                            <div className="reports-grid">
                                <div className="report-card">
                                    <h3>BC20241211001</h3>
                                    <p><strong>B·ªánh nh√¢n:</strong> Nguy·ªÖn VƒÉn A</p>
                                    <p><strong>Ng√†y t·∫°o:</strong> 11/12/2024</p>
                                    <p><strong>Tr·∫°ng th√°i:</strong> <span className="status completed">Ho√†n th√†nh</span></p>
                                    <div className="report-actions">
                                        <button className="action-btn view">Xem</button>
                                        <button className="action-btn edit">S·ª≠a</button>
                                        <button className="action-btn delete">X√≥a</button>
                                    </div>
                                </div>

                                <div className="report-card">
                                    <h3>BC20241211002</h3>
                                    <p><strong>B·ªánh nh√¢n:</strong> Tr·∫ßn Th·ªã B</p>
                                    <p><strong>Ng√†y t·∫°o:</strong> 11/12/2024</p>
                                    <p><strong>Tr·∫°ng th√°i:</strong> <span className="status draft">B·∫£n nh√°p</span></p>
                                    <div className="report-actions">
                                        <button className="action-btn view">Xem</button>
                                        <button className="action-btn edit">S·ª≠a</button>
                                        <button className="action-btn delete">X√≥a</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                </section>
            </div>
        </Layout>
    );
};

export default memo(MedicalReportForm);