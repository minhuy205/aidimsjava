"use client"
import { memo, useState, useEffect } from "react"
import { Link, useLocation } from "react-router-dom"
import LayoutLogin from "../Layout/LayoutLogin"
import HeaderLogin from "../Layout/HeaderLogin"
import { symptomService } from "../../services/symptomService"
import { patientService } from "../../services/patientService"
import MiniChatbot from "../Doctor/MiniChatBot"
import "../../css/PatientProfile.css"
import "../../css/SymptomDisplay.css"

const SymptomDisplayLayout = () => {
    const [selectedPatient, setSelectedPatient] = useState(null)
    const location = useLocation()
    const [patientData, setPatientData] = useState(null)
    const [symptomsData, setSymptomsData] = useState([])
    const [loading, setLoading] = useState(true)
    const [error, setError] = useState(null)
    const [debugInfo, setDebugInfo] = useState({})

    // L·∫•y patientId t·ª´ URL params
    const getPatientIdFromUrl = () => {
        const urlParams = new URLSearchParams(location.search)
        return urlParams.get('patientId')
    }

    // Test connection tr∆∞·ªõc khi fetch data
    const testApiConnection = async () => {
        try {
            console.log("Testing API connections...")

            // Test symptom API
            const symptomTest = await symptomService.testConnection()
            console.log("Symptom API test successful:", symptomTest)

            // Test patient endpoints
            await patientService.testPatientEndpoints()

            setDebugInfo(prev => ({ ...prev, apiTest: "success", symptomTest }))
            return true
        } catch (error) {
            console.error("API connection test failed:", error)
            setDebugInfo(prev => ({ ...prev, apiTest: "failed", apiError: error.message }))
            return false
        }
    }

    // Fetch patient data v√† symptoms data
    useEffect(() => {
        const fetchData = async () => {
            try {
                setLoading(true)
                const patientId = getPatientIdFromUrl()

                // L·∫•y danh s√°ch b·ªánh nh√¢n
                const patients = await patientService.getAllPatients()
                const patient = patients.find(p => String(p.patient_id) === String(patientId))
                setPatientData(patient)
                setSelectedPatient(patient)

                // L·∫•y tri·ªáu ch·ª©ng
                let symptoms = []
                if (patientId) {
                    symptoms = await symptomService.getSymptomsByPatientId(patientId)
                } else {
                    symptoms = await symptomService.getAllSymptoms()
                }
                setSymptomsData(symptoms)
            } catch (err) {
                setSymptomsData([])
            } finally {
                setLoading(false)
            }
        }
        fetchData()
    }, [location.search])

    const formatDate = (dateString) => {
        if (!dateString) return "N/A"
        const date = new Date(dateString)
        return date.toLocaleDateString('vi-VN')
    }

    // Loading state
    if (loading) {
        return (
            <>
                <HeaderLogin />
                <LayoutLogin>
                    <div className="doctor-page">
                        <div className="patient-list-container">
                            <div className="symptom-display-container">
                                <div style={{ textAlign: "center", padding: "2rem" }}>
                                    <div>üîÑ ƒêang t·∫£i th√¥ng tin tri·ªáu ch·ª©ng...</div>
                                    <div style={{ marginTop: "20px", fontSize: "14px", color: "#666" }}>
                                        <div>Patient ID: {getPatientIdFromUrl()}</div>
                                        <div>API Test: {debugInfo.apiTest || "pending"}</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <MiniChatbot />
                </LayoutLogin>
            </>
        )
    }

    // No data state
    if (!patientData) {
        return (
            <>
                <HeaderLogin />
                <LayoutLogin>
                    <div className="doctor-page">
                        <div className="patient-list-container">
                            <div className="symptom-display-container">
                                <div style={{ textAlign: "center", padding: "2rem" }}>
                                    <div>üìù Kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªánh nh√¢n</div>
                                    <div style={{ marginTop: "15px", fontSize: "14px", color: "#666" }}>
                                        Debug: {JSON.stringify(debugInfo, null, 2)}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <MiniChatbot />
                </LayoutLogin>
            </>
        )
    }

    return (
        <>
            <HeaderLogin />
            <LayoutLogin>
                <div className="doctor-page">
                    <div className="patient-list-container">
                        <div className="symptom-display-container">
                            {/* Th√¥ng tin b·ªánh nh√¢n */}
                            <div className="symptom-patient-info" style={{marginBottom: '2rem'}}>
                                <h2 style={{marginBottom: '1rem'}}>ü©∫ Th√¥ng tin b·ªánh nh√¢n</h2>
                                <div style={{color:'#888', marginBottom:'1rem'}}>
                                    Ng√†y kh√°m: {new Date().toLocaleDateString('vi-VN')} - {new Date().toLocaleTimeString('vi-VN', {hour: '2-digit', minute: '2-digit'})}
                                </div>
                                <div style={{display:'flex', gap:'2rem', background:'#f8f9fa', borderRadius:'10px', padding:'1.5rem 2rem', marginBottom:'1.5rem'}}>
                                    <div style={{flex:1}}>
                                        <div><b>M√£ b·ªánh nh√¢n:</b> {patientData?.patient_code || 'N/A'}</div>
                                        <div><b>Tu·ªïi/Gi·ªõi t√≠nh:</b> {patientData?.age || 'N/A'} tu·ªïi - {patientData?.gender || 'N/A'}</div>
                                    </div>
                                    <div style={{flex:1}}>
                                        <div><b>H·ªç v√† t√™n:</b> {patientData?.full_name || 'N/A'}</div>
                                        <div><b>S·ªë ƒëi·ªán tho·∫°i:</b> {patientData?.phone || 'N/A'}</div>
                                    </div>
                                </div>
                            </div>

                            {/* Hi·ªÉn th·ªã tri·ªáu ch·ª©ng t·ª´ database */}
                            <div className="symptoms-section">
                                <h3>L·ªãch s·ª≠ tri·ªáu ch·ª©ng ({symptomsData.length} b·∫£n ghi)</h3>
                                <table className="records-table">
                                    <thead>
                                    <tr>
                                        <th>M√£ BN</th>
                                        <th>H·ªç t√™n</th>
                                        <th>Tu·ªïi</th>
                                        <th>Tri·ªáu ch·ª©ng ch√≠nh</th>
                                        <th>Chi ti·∫øt tri·ªáu ch·ª©ng</th>
                                        <th>Kh√°c</th>
                                        <th>Ng√†y ghi nh·∫≠n</th>
                                        <th>Tr·∫°ng th√°i</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    {symptomsData.length > 0 ? (
                                        symptomsData.map((s, idx) => {
                                            // T√°ch th√¥ng tin nh√¢n vi√™n ghi nh·∫≠n kh·ªèi other_symptoms
                                            let other = s.other_symptoms || '';
                                            let nhanVien = '';
                                            const lines = other.split('\n');
                                            const filtered = lines.filter(line => {
                                                if (line.trim().toLowerCase().startsWith('recorded by')) {
                                                    nhanVien = line.replace('Recorded By:', '').trim();
                                                    return false;
                                                }
                                                return true;
                                            });
                                            return (
                                                <tr key={s.id || idx}>
                                                    <td>{s.patient_code || 'N/A'}</td>
                                                    <td>{s.patient_name || 'Kh√¥ng x√°c ƒë·ªãnh'}</td>
                                                    <td>{s.patient_age || 'N/A'}</td>
                                                    <td>{s.main_symptom || 'Kh√¥ng c√≥ th√¥ng tin'}</td>
                                                    <td>
                                                        {s.detailed_symptoms ?
                                                            s.detailed_symptoms.split('\n').map((line, i) =>
                                                                <div key={i}>
                                                                    {line.replace('Severity:', 'M·ª©c ƒë·ªô:')
                                                                        .replace('Onset:', 'Kh·ªüi ph√°t:')
                                                                        .replace('Duration:', 'Th·ªùi gian:')
                                                                        .replace('Pain Scale:', 'Thang ƒëi·ªÉm ƒëau:')}
                                                                </div>
                                                            ) : 'Kh√¥ng c√≥ chi ti·∫øt'
                                                        }
                                                    </td>
                                                    <td>
                                                        {filtered.length > 0 ?
                                                            filtered.map((line, i) =>
                                                                <div key={i}>
                                                                    {line.replace('Priority:', '∆Øu ti√™n')
                                                                        .replace('Additional Notes:', 'Ghi ch√∫')}
                                                                </div>
                                                            ) : 'Kh√¥ng c√≥ ghi ch√∫'
                                                        }
                                                    </td>
                                                    <td>{s.created_at ? new Date(s.created_at).toLocaleString('vi-VN') : 'Ch∆∞a x√°c ƒë·ªãnh'}</td>
                                                    <td>ƒê√£ ghi nh·∫≠n</td>
                                                </tr>
                                            )
                                        })
                                    ) : (
                                        <tr><td colSpan={8}>Ch∆∞a c√≥ ghi nh·∫≠n tri·ªáu ch·ª©ng n√†o.</td></tr>
                                    )}
                                    </tbody>
                                </table>

                                {/* Hi·ªÉn th·ªã nh√¢n vi√™n ti·∫øp nh·∫≠n n·∫øu c√≥ */}
                                {symptomsData.length > 0 && (() => {
                                    // L·∫•y nh√¢n vi√™n ghi nh·∫≠n m·ªõi nh·∫•t
                                    let nhanVien = '';
                                    const other = symptomsData[symptomsData.length-1].other_symptoms || '';
                                    other.split('\n').forEach(line => {
                                        if (line.trim().toLowerCase().startsWith('recorded by')) {
                                            nhanVien = line.replace('Recorded By:', '').trim();
                                        }
                                    });
                                    return nhanVien ? (
                                        <div style={{marginTop:'10px', fontStyle:'italic', color:'#444'}}>
                                            Nh√¢n vi√™n ti·∫øp nh·∫≠n: <b>{nhanVien}</b>
                                        </div>
                                    ) : null;
                                })()}
                            </div>

                            {/* T√≥m t·∫Øt */}
                            <div className="symptoms-summary">
                                <h3 className="summary-title">
                                    üìä T√≥m t·∫Øt th√¥ng tin
                                </h3>
                                <div className="summary-grid">
                                    <div className="summary-item">
                                        <span className="summary-label">S·ªë b·∫£n ghi tri·ªáu ch·ª©ng:</span>
                                        <div className="summary-value">{symptomsData.length}</div>
                                    </div>
                                    <div className="summary-item">
                                        <span className="summary-label">B·∫£n ghi m·ªõi nh·∫•t:</span>
                                        <div className="summary-value">
                                            {symptomsData.length > 0
                                                ? (symptomsData[symptomsData.length - 1]?.created_at ?
                                                    formatDate(symptomsData[symptomsData.length - 1]?.created_at) : 'Ch∆∞a x√°c ƒë·ªãnh')
                                                : "Ch∆∞a c√≥"
                                            }
                                        </div>
                                    </div>
                                    <div className="summary-item">
                                        <span className="summary-label">Tr·∫°ng th√°i:</span>
                                        <div className="summary-value">
                                            {symptomsData.length > 0 ? "C√≥ d·ªØ li·ªáu" : "Ch∆∞a c√≥ d·ªØ li·ªáu"}
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* N√∫t h√†nh ƒë·ªông */}
                            <div className="action-buttons">
                                <button
                                    className="btn btn-secondary"
                                    onClick={() => window.history.back()}
                                >
                                    ‚Üê Quay l·∫°i
                                </button>

                                <Link to={`/MedicalReportForm?patientId=${selectedPatient?.patient_id}`}>
                                    <button className="btn btn-secondary">üìÑ T·∫°o b√°o c√°o</button>
                                </Link>
                            </div>

                            {/* Debug section */}
                            {debugInfo && Object.keys(debugInfo).length > 0 && (
                                <div style={{
                                    marginTop: "20px",
                                    padding: "15px",
                                    background: "#f8f9fa",
                                    borderRadius: "8px",
                                    fontSize: "12px"
                                }}>
                                    <details>
                                        <summary>Debug Information</summary>
                                        <pre>{JSON.stringify(debugInfo, null, 2)}</pre>
                                    </details>
                                </div>
                            )}
                        </div>
                    </div>
                </div>

                {/* Mini Chatbot - Lu√¥n hi·ªÉn th·ªã */}
                <MiniChatbot />
            </LayoutLogin>
        </>
    )
}
export default memo(SymptomDisplayLayout)
