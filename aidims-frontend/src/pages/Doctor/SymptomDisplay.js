"use client"
import { memo, useState, useEffect } from "react"
import Layout from "../Layout/Layout"
import Header from "../Layout/Header" // Import Header component ƒë√∫ng c√°ch
import "../../css/PatientProfile.css"
import "../../css/SymptomDisplay.css"

const SymptomDisplayLayout = () => {

    // D·ªØ li·ªáu m·∫´u c·ªßa b·ªánh nh√¢n v√† tri·ªáu ch·ª©ng
    const patientData = {
        id: 1,
        name: "Nguy·ªÖn VƒÉn A",
        code: "BN001",
        age: 45,
        gender: "Nam",
        phone: "0123456789",
        chiefComplaint: "B·ªánh nh√¢n than phi·ªÅn ƒëau ng·ª±c, kh√≥ th·ªü khi g·∫Øng s·ª©c, k√®m theo c·∫£m gi√°c h·ªìi h·ªôp tim ƒë·∫≠p nhanh. Tri·ªáu ch·ª©ng xu·∫•t hi·ªán t·ª´ 3 ng√†y nay v√† c√≥ xu h∆∞·ªõng tƒÉng d·∫ßn.",
        selectedSymptoms: [
            { code: "TM01", name: "ƒêau ng·ª±c", description: "C·∫£m gi√°c ƒëau, t·ª©c ng·ª±c", severity: "N·∫∑ng" },
            { code: "TM02", name: "Kh√≥ th·ªü", description: "Kh√≥ th·ªü, th·ªü g·∫•p", severity: "Trung b√¨nh" },
            { code: "TM03", name: "H·ªìi h·ªôp", description: "Tim ƒë·∫≠p nhanh, h·ªìi h·ªôp", severity: "Nh·∫π" },
            { code: "HH04", name: "Th·ªü g·∫•p", description: "Nh·ªãp th·ªü nhanh, kh√≥ th·ªü", severity: "Trung b√¨nh" },
            { code: "TK02", name: "Ch√≥ng m·∫∑t", description: "C·∫£m gi√°c ch√≥ng m·∫∑t, cho√°ng v√°ng", severity: "Nh·∫π" }
        ],
        otherSymptoms: "B·ªánh nh√¢n c√≤n c√≥ c·∫£m gi√°c m·ªát m·ªèi, ƒÉn u·ªëng k√©m, th·ªânh tho·∫£ng c√≥ c·∫£m gi√°c bu·ªìn n√¥n nh·∫π v√†o bu·ªïi s√°ng.",
        examDate: "2025-06-17",
        examTime: "09:30"
    }

    // Danh s√°ch t·∫•t c·∫£ tri·ªáu ch·ª©ng ƒë·ªÉ tham chi·∫øu
    const allSymptoms = [
        // Tim m·∫°ch
        { code: "TM01", name: "ƒêau ng·ª±c", description: "C·∫£m gi√°c ƒëau, t·ª©c ng·ª±c", group: "Tim m·∫°ch" },
        { code: "TM02", name: "Kh√≥ th·ªü", description: "Kh√≥ th·ªü, th·ªü g·∫•p", group: "Tim m·∫°ch" },
        { code: "TM03", name: "H·ªìi h·ªôp", description: "Tim ƒë·∫≠p nhanh, h·ªìi h·ªôp", group: "Tim m·∫°ch" },
        { code: "TM04", name: "Ph√π ch√¢n", description: "S∆∞ng ph√π v√πng ch√¢n", group: "Tim m·∫°ch" },
        // H√¥ h·∫•p
        { code: "HH01", name: "Ho khan", description: "Ho kh√¥ng c√≥ ƒë·ªùm", group: "H√¥ h·∫•p" },
        { code: "HH02", name: "Ho c√≥ ƒë·ªùm", description: "Ho k√®m ƒë·ªùm", group: "H√¥ h·∫•p" },
        { code: "HH03", name: "Th·ªü kh√≤ kh√®", description: "Th·ªü c√≥ ti·∫øng kh√≤ kh√®", group: "H√¥ h·∫•p" },
        { code: "HH04", name: "Th·ªü g·∫•p", description: "Nh·ªãp th·ªü nhanh, kh√≥ th·ªü", group: "H√¥ h·∫•p" },
        // Ti√™u h√≥a
        { code: "TH01", name: "ƒêau b·ª•ng", description: "ƒêau v√πng b·ª•ng", group: "Ti√™u h√≥a" },
        { code: "TH02", name: "Bu·ªìn n√¥n", description: "C·∫£m gi√°c bu·ªìn n√¥n", group: "Ti√™u h√≥a" },
        { code: "TH03", name: "Ti√™u ch·∫£y", description: "ƒêi ngo√†i l·ªèng nhi·ªÅu l·∫ßn", group: "Ti√™u h√≥a" },
        { code: "TH04", name: "T√°o b√≥n", description: "Kh√≥ ƒëi ngo√†i, ƒë·∫°i ti·ªán c·ª©ng", group: "Ti√™u h√≥a" },
        // Th·∫ßn kinh
        { code: "TK01", name: "ƒêau ƒë·∫ßu", description: "C·∫£m gi√°c ƒëau ƒë·∫ßu", group: "Th·∫ßn kinh" },
        { code: "TK02", name: "Ch√≥ng m·∫∑t", description: "C·∫£m gi√°c ch√≥ng m·∫∑t, cho√°ng v√°ng", group: "Th·∫ßn kinh" },
        { code: "TK03", name: "T√™ li·ªát", description: "M·∫•t c·∫£m gi√°c, kh√¥ng c·ª≠ ƒë·ªông ƒë∆∞·ª£c", group: "Th·∫ßn kinh" },
        { code: "TK04", name: "Co gi·∫≠t", description: "C∆°n co gi·∫≠t kh√¥ng ki·ªÉm so√°t", group: "Th·∫ßn kinh" },
        // C∆° x∆∞∆°ng kh·ªõp
        { code: "CXK01", name: "ƒêau kh·ªõp", description: "ƒêau v√πng kh·ªõp", group: "C∆° x∆∞∆°ng kh·ªõp" },
        { code: "CXK02", name: "S∆∞ng kh·ªõp", description: "Kh·ªõp b·ªã s∆∞ng", group: "C∆° x∆∞∆°ng kh·ªõp" },
        { code: "CXK03", name: "C·ª©ng kh·ªõp", description: "Kh·ªõp b·ªã c·ª©ng, kh√≥ c·ª≠ ƒë·ªông", group: "C∆° x∆∞∆°ng kh·ªõp" },
        { code: "CXK04", name: "Y·∫øu c∆°", description: "C∆° b·∫Øp y·∫øu, m·∫•t s·ª©c", group: "C∆° x∆∞∆°ng kh·ªõp" }
    ]

    const getSeverityColor = (severity) => {
        switch (severity) {
            case "N·∫∑ng": return "severity-severe"
            case "Trung b√¨nh": return "severity-moderate"
            case "Nh·∫π": return "severity-mild"
            default: return "severity-default"
        }
    }

    const groupSymptomsByCategory = () => {
        const grouped = {}
        patientData.selectedSymptoms.forEach(symptom => {
            const fullSymptom = allSymptoms.find(s => s.code === symptom.code)
            if (fullSymptom) {
                if (!grouped[fullSymptom.group]) {
                    grouped[fullSymptom.group] = []
                }
                grouped[fullSymptom.group].push(symptom)
            }
        })
        return grouped
    }

    const groupedSymptoms = groupSymptomsByCategory()

    return (
        <>
            <Header />
            <Layout>
                <div className="doctor-page">
                    <div className="patient-list-container">
                        <div className="symptom-display-container">
                            {/* Header */}
                            <div className="symptom-header">
                                <h1 className="symptom-title">
                                    ü©∫ Th√¥ng tin Tri·ªáu ch·ª©ng B·ªánh nh√¢n
                                </h1>
                                <p className="exam-info">
                                    Ng√†y kh√°m: {patientData.examDate} - {patientData.examTime}
                                </p>
                            </div>

                            {/* Th√¥ng tin b·ªánh nh√¢n */}
                            <div className="patient-info-section">
                                <h2 className="section-title">
                                    üë§ Th√¥ng tin b·ªánh nh√¢n
                                </h2>
                                <div className="info-grid">
                                    <div className="info-row">
                                        <span className="info-label">M√£ b·ªánh nh√¢n:</span>
                                        <div className="info-value">{patientData.code}</div>
                                    </div>
                                    <div className="info-row">
                                        <span className="info-label">H·ªç v√† t√™n:</span>
                                        <div className="info-value">{patientData.name}</div>
                                    </div>
                                    <div className="info-row">
                                        <span className="info-label">Tu·ªïi/Gi·ªõi t√≠nh:</span>
                                        <div className="info-value">{patientData.age} tu·ªïi - {patientData.gender}</div>
                                    </div>
                                </div>
                            </div>

                            {/* Tri·ªáu ch·ª©ng ch√≠nh */}
                            <div className="chief-complaint-section">
                                <h2 className="section-title">
                                    ü©∫ Tri·ªáu ch·ª©ng ch√≠nh
                                </h2>
                                <div className="complaint-content">
                                    <p>{patientData.chiefComplaint}</p>
                                </div>
                            </div>

                            {/* Tri·ªáu ch·ª©ng c·ª• th·ªÉ */}
                            <div className="symptoms-section">
                                <h2 className="section-title">
                                    üìã Tri·ªáu ch·ª©ng c·ª• th·ªÉ ({patientData.selectedSymptoms.length} tri·ªáu ch·ª©ng)
                                </h2>

                                {Object.keys(groupedSymptoms).length > 0 ? (
                                    <div className="symptoms-groups">
                                        {Object.entries(groupedSymptoms).map(([group, symptoms]) => (
                                            <div key={group} className="symptom-group">
                                                <h3 className="group-title">
                                                    <span className="group-badge">
                                                        {group}
                                                    </span>
                                                    ({symptoms.length} tri·ªáu ch·ª©ng)
                                                </h3>
                                                <div className="symptoms-grid">
                                                    {symptoms.map((symptom, index) => (
                                                        <div key={index} className="symptom-card">
                                                            <div className="symptom-header-row">
                                                                <div className="symptom-name">
                                                                    {symptom.name}
                                                                </div>
                                                                <span className={`severity-badge ${getSeverityColor(symptom.severity)}`}>
                                                                    {symptom.severity}
                                                                </span>
                                                            </div>
                                                            <div className="symptom-description">
                                                                {symptom.description}
                                                            </div>
                                                            <div className="symptom-code">
                                                                {symptom.code}
                                                            </div>
                                                        </div>
                                                    ))}
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                ) : (
                                    <div className="no-symptoms">
                                        Kh√¥ng c√≥ tri·ªáu ch·ª©ng c·ª• th·ªÉ n√†o ƒë∆∞·ª£c ghi nh·∫≠n
                                    </div>
                                )}
                            </div>

                            {/* Tri·ªáu ch·ª©ng kh√°c */}
                            {patientData.otherSymptoms && (
                                <div className="other-symptoms-section">
                                    <h2 className="section-title">
                                        üìù Tri·ªáu ch·ª©ng kh√°c
                                    </h2>
                                    <div className="other-symptoms-content">
                                        <p>{patientData.otherSymptoms}</p>
                                    </div>
                                </div>
                            )}

                            {/* T√≥m t·∫Øt */}
                            <div className="symptoms-summary">
                                <h3 className="summary-title">
                                    üìä T√≥m t·∫Øt tri·ªáu ch·ª©ng
                                </h3>
                                <div className="summary-grid">
                                    <div className="summary-item">
                                        <span className="summary-label">T·ªïng s·ªë tri·ªáu ch·ª©ng:</span>
                                        <div className="summary-value">{patientData.selectedSymptoms.length}</div>
                                    </div>
                                    <div className="summary-item">
                                        <span className="summary-label">Tri·ªáu ch·ª©ng n·∫∑ng:</span>
                                        <div className="summary-value">
                                            {patientData.selectedSymptoms.filter(s => s.severity === "N·∫∑ng").length}
                                        </div>
                                    </div>
                                    <div className="summary-item">
                                        <span className="summary-label">Nh√≥m tri·ªáu ch·ª©ng:</span>
                                        <div className="summary-value">{Object.keys(groupedSymptoms).length}</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </Layout>
        </>
    )
}

export default memo(SymptomDisplayLayout)