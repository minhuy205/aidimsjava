"use client"

import { useState, useEffect } from "react"
import { useSearchParams, Link, useNavigate } from 'react-router-dom'
import LayoutLogin from "../Layout/LayoutLogin"
import { patientService } from "../../services/patientService"
import { requestPhotoService } from "../../services/requestPhotoService"
import "../../css/CreateImagingRequest.css"

const CreateImagingRequest = () => {
    const [searchParams] = useSearchParams()
    const navigate = useNavigate()
    const patientId = searchParams.get('patientId')

    const [patient, setPatient] = useState(null)
    const [loading, setLoading] = useState(true)
    const [error, setError] = useState(null)
    const [submitting, setSubmitting] = useState(false)
    const [successMessage, setSuccessMessage] = useState(null) // TH√äM STATE
    const [formData, setFormData] = useState({
        imagingType: '',
        bodyPart: '',
        priority: 'normal',
        requestDate: new Date().toISOString().split('T')[0],
        clinicalInfo: '',
        notes: ''
    })

    // Load patient information
    useEffect(() => {
        const fetchPatient = async () => {
            try {
                setLoading(true)
                if (!patientId) {
                    setError("Kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªánh nh√¢n")
                    return
                }

                const patientsData = await patientService.getAllPatients()
                const selectedPatient = patientsData.find(p => p.patient_id == patientId)

                if (!selectedPatient) {
                    setError("Kh√¥ng t√¨m th·∫•y b·ªánh nh√¢n")
                    return
                }

                const transformedPatient = {
                    id: selectedPatient.patient_id,
                    patientCode: selectedPatient.patient_code,
                    fullName: selectedPatient.full_name,
                    dateOfBirth: selectedPatient.date_of_birth,
                    gender: selectedPatient.gender,
                    phone: selectedPatient.phone,
                    email: selectedPatient.email,
                    address: selectedPatient.address,
                    identityNumber: selectedPatient.identity_number,
                    insuranceNumber: selectedPatient.insurance_number,
                }

                setPatient(transformedPatient)
            } catch (err) {
                console.error("L·ªói:", err)
                setError("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin b·ªánh nh√¢n")
            } finally {
                setLoading(false)
            }
        }

        fetchPatient()
    }, [patientId])

    const calculateAge = (dateOfBirth) => {
        if (!dateOfBirth) return "N/A"
        const today = new Date()
        const birthDate = new Date(dateOfBirth)
        let age = today.getFullYear() - birthDate.getFullYear()
        const monthDiff = today.getMonth() - birthDate.getMonth()
        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
            age--
        }
        return age
    }

    // Handle form input changes
    const handleInputChange = (e) => {
        const { name, value } = e.target
        setFormData(prev => ({
            ...prev,
            [name]: value
        }))
    }

    // Handle form submission
    const handleSubmit = async (e) => {
        e.preventDefault()

        try {
            setSubmitting(true)
            setError(null)

            // Validate form
            if (!formData.imagingType) {
                throw new Error("Vui l√≤ng ch·ªçn lo·∫°i ch·ª•p")
            }
            if (!formData.bodyPart) {
                throw new Error("Vui l√≤ng ch·ªçn v·ªã tr√≠ ch·ª•p")
            }
            if (!formData.clinicalInfo.trim()) {
                throw new Error("Vui l√≤ng nh·∫≠p th√¥ng tin l√¢m s√†ng")
            }

            // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l√™n server - ƒê√É S·ª¨A
            const requestData = {
                patientId: patient.id,
                imagingType: formData.imagingType,
                bodyPart: formData.bodyPart,
                clinicalIndication: formData.clinicalInfo.trim(), // ƒê·ªïi t√™n field
                notes: formData.notes.trim() || null,
                priorityLevel: formData.priority,
                requestDate: formData.requestDate,
                status: 'pending'
            }

            console.log('Sending request data:', requestData)

            // G·ª≠i request l√™n server
            const result = await requestPhotoService.createRequest(requestData)

            console.log('Request created successfully:', result)

            // Hi·ªÉn th·ªã success message tr√™n UI
            setSuccessMessage(`T·∫°o y√™u c·∫ßu ch·ª•p th√†nh c√¥ng! M√£ y√™u c·∫ßu: ${result.data.requestCode}`)

            // T·ª± ƒë·ªông ·∫©n success message sau 5 gi√¢y
            setTimeout(() => {
                setSuccessMessage(null)
            }, 5000)

            // Th√¥ng b√°o th√†nh c√¥ng
            alert(`‚úÖ T·∫°o y√™u c·∫ßu ch·ª•p th√†nh c√¥ng!\nM√£ y√™u c·∫ßu: ${result.data.requestCode}`)

            // Reset form
            setFormData({
                imagingType: '',
                bodyPart: '',
                priority: 'normal',
                requestDate: new Date().toISOString().split('T')[0],
                clinicalInfo: '',
                notes: ''
            })

            // Th√¥ng b√°o th√†nh c√¥ng v√† h·ªèi user
            const shouldCreateAnother = window.confirm(
                `‚úÖ T·∫°o y√™u c·∫ßu ch·ª•p th√†nh c√¥ng!\n` +
                `M√£ y√™u c·∫ßu: ${result.data.requestCode}\n\n` +
                `B·∫°n c√≥ mu·ªën t·∫°o y√™u c·∫ßu kh√°c cho b·ªánh nh√¢n n√†y kh√¥ng?\n` +
                `‚Ä¢ OK: T·∫°o y√™u c·∫ßu m·ªõi\n` +
                `‚Ä¢ Cancel: Quay l·∫°i trang tr∆∞·ªõc`
            )

            // Reset form
            setFormData({
                imagingType: '',
                bodyPart: '',
                priority: 'normal',
                requestDate: new Date().toISOString().split('T')[0],
                clinicalInfo: '',
                notes: ''
            })

            if (!shouldCreateAnother) {
                // User ch·ªçn Cancel -> quay l·∫°i trang tr∆∞·ªõc
                navigate(-1)
            }
            // User ch·ªçn OK -> ·ªü l·∫°i trang v·ªõi form ƒë√£ reset

        } catch (err) {
            console.error('Error submitting form:', err)
            setError(err.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o y√™u c·∫ßu')
        } finally {
            setSubmitting(false)
        }
    }

    if (loading) {
        return (
            <LayoutLogin>

                <div className="create-imaging-page">
                    <div className="imaging-container">
                        <div className="page-header">
                            <h2>üì∑ T·∫°o y√™u c·∫ßu ch·ª•p X-quang/CT</h2>
                            <p>ƒêang t·∫£i th√¥ng tin b·ªánh nh√¢n...</p>
                        </div>
                        <div style={{ textAlign: "center", padding: "2rem" }}>
                            <div>üîÑ ƒêang t·∫£i...</div>
                        </div>
                    </div>
                </div>
            </LayoutLogin>
        )
    }

    if (error && !patient) {
        return (
            <LayoutLogin>
                <div className="create-imaging-page">
                    <div className="imaging-container">
                        <div className="page-header">
                            <h2>üì∑ T·∫°o y√™u c·∫ßu ch·ª•p X-quang/CT</h2>
                            <p>C√≥ l·ªói x·∫£y ra</p>
                        </div>
                        <div style={{ textAlign: "center", padding: "2rem", color: "red" }}>
                            <div>‚ùå {error}</div>
                            <Link to="/Doctor/PatientProfile">
                                <button className="btn btn-secondary" style={{ marginTop: "1rem" }}>
                                    ‚Üê Quay l·∫°i danh s√°ch b·ªánh nh√¢n
                                </button>
                            </Link>
                        </div>
                    </div>
                </div>
            </LayoutLogin>
        )
    }

    return (
        <LayoutLogin>
            <button
                onClick={() => window.history.back()}
                style={{
                    position: 'fixed',
                    top: '20px',
                    left: '20px',
                    zIndex: 99999,
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    padding: '10px 16px',
                    background: '#fff',
                    border: '2px solid #007bff',
                    borderRadius: '8px',
                    color: '#007bff',
                    fontSize: '14px',
                    fontWeight: '500',
                    cursor: 'pointer',
                    fontFamily: 'inherit'
                }}
                title="Quay l·∫°i"
            >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M19 12H5M12 19l-7-7 7-7"/>
                </svg>
                <span>Quay l·∫°i</span>
            </button>
            <div className="create-imaging-page">
                <div className="imaging-container">
                    <div className="page-header">
                        <h2>üì∑ T·∫°o y√™u c·∫ßu ch·ª•p X-quang/CT</h2>
                        <p>T·∫°o y√™u c·∫ßu ch·ª•p chi·∫øu cho b·ªánh nh√¢n</p>
                    </div>

                    {/* Success Message */}
                    {successMessage && (
                        <div style={{
                            backgroundColor: '#e8f5e8',
                            color: '#2d5a2d',
                            padding: '1rem',
                            borderRadius: '4px',
                            marginBottom: '1rem',
                            border: '1px solid #90ee90'
                        }}>
                            ‚úÖ {successMessage}
                        </div>
                    )}

                    {/* Error Display */}
                    {error && (
                        <div style={{
                            backgroundColor: '#fee',
                            color: '#c33',
                            padding: '1rem',
                            borderRadius: '4px',
                            marginBottom: '1rem',
                            border: '1px solid #fcc'
                        }}>
                            ‚ùå {error}
                        </div>
                    )}

                    {/* Patient Information Card */}
                    <div className="patient-info-card">
                        <h3>üë§ Th√¥ng tin b·ªánh nh√¢n</h3>
                        <div className="patient-info-grid">
                            <div className="info-item">
                                <span className="info-label">M√£ b·ªánh nh√¢n:</span>
                                <span className="info-value">{patient?.patientCode}</span>
                            </div>
                            <div className="info-item">
                                <span className="info-label">H·ªç v√† t√™n:</span>
                                <span className="info-value">{patient?.fullName}</span>
                            </div>
                            <div className="info-item">
                                <span className="info-label">Tu·ªïi:</span>
                                <span className="info-value">{calculateAge(patient?.dateOfBirth)} tu·ªïi</span>
                            </div>
                            <div className="info-item">
                                <span className="info-label">Gi·ªõi t√≠nh:</span>
                                <span className="info-value">{patient?.gender}</span>
                            </div>
                            <div className="info-item">
                                <span className="info-label">Ng√†y sinh:</span>
                                <span className="info-value">{patient?.dateOfBirth}</span>
                            </div>
                            <div className="info-item">
                                <span className="info-label">S·ªë ƒëi·ªán tho·∫°i:</span>
                                <span className="info-value">{patient?.phone}</span>
                            </div>
                        </div>
                    </div>

                    {/* Imaging Request Form */}
                    <div className="imaging-form-card">
                        <h3>üìã Th√¥ng tin y√™u c·∫ßu ch·ª•p</h3>
                        <form className="imaging-form" onSubmit={handleSubmit}>
                            <div className="form-row">
                                <div className="form-group">
                                    <label htmlFor="imagingType">Lo·∫°i ch·ª•p: <span style={{color: 'red'}}>*</span></label>
                                    <select
                                        id="imagingType"
                                        name="imagingType"
                                        value={formData.imagingType}
                                        onChange={handleInputChange}
                                        required
                                    >
                                        <option value="">-- Ch·ªçn lo·∫°i ch·ª•p --</option>
                                        <option value="x-ray">X-quang</option>
                                        <option value="ct">CT Scan</option>
                                        <option value="mri">MRI</option>
                                        <option value="ultrasound">Si√™u √¢m</option>
                                        <option value="Mammography">Mammography</option>
                                        <option value="Fluoroscopy">Fluoroscopy</option>
                                        <option value="PET-CT">PET-CT</option>
                                        <option value="SPECT">SPECT</option>
                                    </select>
                                </div>
                                <div className="form-group">
                                    <label htmlFor="bodyPart">V·ªã tr√≠ ch·ª•p: <span style={{color: 'red'}}>*</span></label>
                                    <select
                                        id="bodyPart"
                                        name="bodyPart"
                                        value={formData.bodyPart}
                                        onChange={handleInputChange}
                                        required
                                    >
                                        <option value="">-- Ch·ªçn v·ªã tr√≠ --</option>
                                        <option value="Ng·ª±c">Ng·ª±c</option>
                                        <option value="B·ª•ng">B·ª•ng</option>
                                        <option value="ƒê·∫ßu">ƒê·∫ßu</option>
                                        <option value="C·ªôt s·ªëng">C·ªôt s·ªëng</option>
                                        <option value="T·ª© chi">T·ª© chi</option>
                                        <option value="Khung Ch·∫≠u">Khung ch·∫≠u</option>
                                        <option value="other">Kh√°c</option>
                                    </select>
                                </div>
                            </div>

                            <div className="form-row">
                                <div className="form-group">
                                    <label htmlFor="priority">M·ª©c ƒë·ªô ∆∞u ti√™n:</label>
                                    <select
                                        id="priority"
                                        name="priority"
                                        value={formData.priority}
                                        onChange={handleInputChange}
                                        required
                                    >
                                        <option value="B√¨nh th∆∞·ªùng">B√¨nh th∆∞·ªùng</option>
                                        <option value="Kh·∫©n c·∫•p">Kh·∫©n c·∫•p</option>
                                        <option value="C·∫•p c·ª©u">C·∫•p c·ª©u</option>
                                    </select>
                                </div>
                                <div className="form-group">
                                    <label htmlFor="requestDate">Ng√†y y√™u c·∫ßu:</label>
                                    <input
                                        type="date"
                                        id="requestDate"
                                        name="requestDate"
                                        value={formData.requestDate}
                                        onChange={handleInputChange}
                                        required
                                    />
                                </div>
                            </div>

                            <div className="form-group">
                                <label htmlFor="clinicalInfo">Th√¥ng tin l√¢m s√†ng: <span style={{color: 'red'}}>*</span></label>
                                <textarea
                                    id="clinicalInfo"
                                    name="clinicalInfo"
                                    rows="4"
                                    placeholder="Nh·∫≠p th√¥ng tin l√¢m s√†ng, tri·ªáu ch·ª©ng, ch·∫©n ƒëo√°n s∆° b·ªô..."
                                    value={formData.clinicalInfo}
                                    onChange={handleInputChange}
                                    required
                                ></textarea>
                            </div>

                            <div className="form-group">
                                <label htmlFor="notes">Ghi ch√∫ th√™m:</label>
                                <textarea
                                    id="notes"
                                    name="notes"
                                    rows="3"
                                    placeholder="Ghi ch√∫ th√™m n·∫øu c√≥..."
                                    value={formData.notes}
                                    onChange={handleInputChange}
                                ></textarea>
                            </div>

                            <div className="form-actions">
                                <Link to="/PatientProfile">
                                    <button type="button" className="btn btn-secondary" disabled={submitting}>
                                        ‚Üê Quay l·∫°i
                                    </button>
                                </Link>

                                <button type="submit" className="btn btn-primary" disabled={submitting}>
                                    {submitting ? (
                                        <>üîÑ ƒêang g·ª≠i...</>
                                    ) : (
                                        <>üì§ G·ª≠i y√™u c·∫ßu ch·ª•p</>
                                    )}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </LayoutLogin>
    )
}

export default CreateImagingRequest
