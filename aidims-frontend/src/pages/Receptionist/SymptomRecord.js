"use client"

import { useState, useEffect } from "react"
import Layout from "../Layout/Layout"
import { patientService } from "../../services/patientService"
import { symptomService } from "../../services/symptomService"
import "../../css/symptomRecord.css"

const SymptomRecord = () => {
  const [patients, setPatients] = useState([])
  const [selectedPatient, setSelectedPatient] = useState("")
  const [selectedPatientData, setSelectedPatientData] = useState(null)
  const [symptoms, setSymptoms] = useState([])
  const [selectedSymptoms, setSelectedSymptoms] = useState([])
  const [customSymptom, setCustomSymptom] = useState("")
  const [chiefComplaint, setChiefComplaint] = useState("")
  const [severityLevel, setSeverityLevel] = useState("Trung b√¨nh")
  const [onsetTime, setOnsetTime] = useState("")
  const [duration, setDuration] = useState("")
  const [painScale, setPainScale] = useState("")
  const [additionalNotes, setAdditionalNotes] = useState("")
  const [priorityLevel, setPriorityLevel] = useState("B√¨nh th∆∞·ªùng")
  const [records, setRecords] = useState([])
  const [loading, setLoading] = useState(false)
  const [selectedRecord, setSelectedRecord] = useState(null)
  const [showDetailModal, setShowDetailModal] = useState(false)

  // Load data on component mount
  useEffect(() => {
    loadPatients()
    loadSymptomRecords()
    initializeSymptoms()
  }, [])

  const loadPatients = async () => {
    try {
      const data = await patientService.getAllPatients()
      console.log("Loaded patients for symptoms:", data)
      setPatients(data)
    } catch (error) {
      console.error("Error loading patients:", error)
      setPatients([])
    }
  }

  const loadSymptomRecords = async () => {
    try {
      console.log("üîç Loading symptom records...")
      const data = await symptomService.getAllSymptoms()
      console.log("üìä Raw symptom data received:", data)
      console.log("üìä Number of records:", data.length)

      // Log t·ª´ng record ƒë·ªÉ debug
      data.forEach((record, index) => {
        console.log(`Record ${index + 1}:`, {
          symptom_id: record.symptom_id,
          patient_code: record.patient_code,
          patient_name: record.patient_name,
          chief_complaint: record.chief_complaint,
          recorded_at: record.recorded_at,
        })
      })

      setRecords(data)
    } catch (error) {
      console.error("‚ùå Error loading symptom records:", error)
      setRecords([])
    }
  }

  const initializeSymptoms = () => {
    // Initialize symptoms by specialty
    const symptomsBySpecialty = {
      "Tim m·∫°ch": [
        { code: "TM01", name: "ƒêau ng·ª±c", description: "C·∫£m gi√°c ƒëau, t·ª©c ng·ª±c" },
        { code: "TM02", name: "Kh√≥ th·ªü", description: "Kh√≥ th·ªü, th·ªü g·∫•p" },
        { code: "TM03", name: "H·ªìi h·ªôp", description: "Tim ƒë·∫≠p nhanh, h·ªìi h·ªôp" },
        { code: "TM04", name: "Ph√π ch√¢n", description: "S∆∞ng ph√π v√πng ch√¢n" },
      ],
      "H√¥ h·∫•p": [
        { code: "HH01", name: "Ho khan", description: "Ho kh√¥ng c√≥ ƒë·ªùm" },
        { code: "HH02", name: "Ho c√≥ ƒë·ªùm", description: "Ho k√®m ƒë·ªùm" },
        { code: "HH03", name: "Th·ªü kh√≤ kh√®", description: "Th·ªü c√≥ ti·∫øng kh√≤ kh√®" },
        { code: "HH04", name: "Th·ªü g·∫•p", description: "Nh·ªãp th·ªü nhanh, kh√≥ th·ªü" },
      ],
      "Ti√™u h√≥a": [
        { code: "TH01", name: "ƒêau b·ª•ng", description: "ƒêau v√πng b·ª•ng" },
        { code: "TH02", name: "Bu·ªìn n√¥n", description: "C·∫£m gi√°c bu·ªìn n√¥n" },
        { code: "TH03", name: "Ti√™u ch·∫£y", description: "ƒêi ngo√†i l·ªèng nhi·ªÅu l·∫ßn" },
        { code: "TH04", name: "T√°o b√≥n", description: "Kh√≥ ƒëi ngo√†i, ƒë·∫°i ti·ªán c·ª©ng" },
      ],
      "Th·∫ßn kinh": [
        { code: "TK01", name: "ƒêau ƒë·∫ßu", description: "C·∫£m gi√°c ƒëau ƒë·∫ßu" },
        { code: "TK02", name: "Ch√≥ng m·∫∑t", description: "C·∫£m gi√°c ch√≥ng m·∫∑t, cho√°ng v√°ng" },
        { code: "TK03", name: "T√™ li·ªát", description: "M·∫•t c·∫£m gi√°c, kh√¥ng c·ª≠ ƒë·ªông ƒë∆∞·ª£c" },
        { code: "TK04", name: "Co gi·∫≠t", description: "C∆°n co gi·∫≠t kh√¥ng ki·ªÉm so√°t" },
      ],
      "C∆° x∆∞∆°ng kh·ªõp": [
        { code: "CXK01", name: "ƒêau kh·ªõp", description: "ƒêau v√πng kh·ªõp" },
        { code: "CXK02", name: "S∆∞ng kh·ªõp", description: "Kh·ªõp b·ªã s∆∞ng" },
        { code: "CXK03", name: "C·ª©ng kh·ªõp", description: "Kh·ªõp b·ªã c·ª©ng, kh√≥ c·ª≠ ƒë·ªông" },
        { code: "CXK04", name: "Y·∫øu c∆°", description: "C∆° b·∫Øp y·∫øu, m·∫•t s·ª©c" },
      ],
    }

    // Flatten all symptoms
    const allSymptoms = Object.values(symptomsBySpecialty).flat()
    setSymptoms(allSymptoms)
  }

  const handlePatientChange = (e) => {
    const patientId = e.target.value
    setSelectedPatient(patientId)

    if (patientId) {
      const patient = patients.find((p) => p.patient_id === Number.parseInt(patientId))
      setSelectedPatientData(patient)
      console.log("Selected patient:", patient)
    } else {
      setSelectedPatientData(null)
    }
  }

  const handleSymptomToggle = (symptom) => {
    setSelectedSymptoms((prev) => {
      const exists = prev.find((s) => s.code === symptom.code)
      if (exists) {
        return prev.filter((s) => s.code !== symptom.code)
      } else {
        return [...prev, symptom]
      }
    })
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    setLoading(true)

    try {
      if (!selectedPatient) {
        alert("Vui l√≤ng ch·ªçn b·ªánh nh√¢n")
        return
      }

      if (!chiefComplaint.trim()) {
        alert("Vui l√≤ng nh·∫≠p tri·ªáu ch·ª©ng ch√≠nh")
        return
      }

      const symptomData = {
        patient_id: Number.parseInt(selectedPatient),
        chief_complaint: chiefComplaint,
        selected_symptoms: JSON.stringify(selectedSymptoms),
        custom_symptoms: customSymptom,
        severity_level: severityLevel,
        onset_time: onsetTime,
        duration: duration,
        pain_scale: painScale ? Number.parseInt(painScale) : null,
        additional_notes: additionalNotes,
        recorded_by: "Huy - Nh√¢n vi√™n ti·∫øp nh·∫≠n", // C√≥ th·ªÉ l·∫•y t·ª´ session
        priority_level: priorityLevel,
      }

      console.log("Submitting symptom data:", symptomData)

      await symptomService.createSymptomRecord(symptomData)

      // Reload records
      await loadSymptomRecords()

      // Reset form
      resetForm()

      alert("ƒê√£ ghi nh·∫≠n tri·ªáu ch·ª©ng th√†nh c√¥ng!")
    } catch (error) {
      console.error("Error saving symptom record:", error)
      alert("C√≥ l·ªói x·∫£y ra khi l∆∞u th√¥ng tin tri·ªáu ch·ª©ng: " + error.message)
    } finally {
      setLoading(false)
    }
  }

  const resetForm = () => {
    setSelectedPatient("")
    setSelectedPatientData(null)
    setSelectedSymptoms([])
    setCustomSymptom("")
    setChiefComplaint("")
    setSeverityLevel("Trung b√¨nh")
    setOnsetTime("")
    setDuration("")
    setPainScale("")
    setAdditionalNotes("")
    setPriorityLevel("B√¨nh th∆∞·ªùng")
  }

  const handleViewDetail = (record) => {
    setSelectedRecord(record)
    setShowDetailModal(true)
  }

  const closeDetailModal = () => {
    setShowDetailModal(false)
    setSelectedRecord(null)
  }

  const getPriorityColor = (priority) => {
    switch (priority) {
      case "Kh·∫©n c·∫•p":
        return "#dc3545"
      case "∆Øu ti√™n":
        return "#fd7e14"
      default:
        return "#28a745"
    }
  }

  const getSeverityColor = (severity) => {
    switch (severity) {
      case "N·∫∑ng":
        return "#dc3545"
      case "Trung b√¨nh":
        return "#fd7e14"
      default:
        return "#28a745"
    }
  }

  return (
    <Layout>
      <div className="symptom-record-page">
        <div className="page-header">
          <h2>üìù Ghi nh·∫≠n Tri·ªáu ch·ª©ng</h2>
          <p>Ti·∫øp nh·∫≠n v√† ghi l·∫°i t√¨nh tr·∫°ng s·ª©c kh·ªèe ban ƒë·∫ßu c·ªßa b·ªánh nh√¢n</p>
        </div>

        <div className="symptom-form-container">
          <form onSubmit={handleSubmit} className="symptom-form">
            <div className="form-section">
              <h3>üë§ Th√¥ng tin b·ªánh nh√¢n</h3>
              <div className="form-group">
                <label>Ch·ªçn b·ªánh nh√¢n: *</label>
                <select value={selectedPatient} onChange={handlePatientChange} required>
                  <option value="">-- Ch·ªçn b·ªánh nh√¢n --</option>
                  {patients.map((patient) => (
                    <option key={patient.patient_id} value={patient.patient_id}>
                      {patient.patient_code} - {patient.full_name} - {patient.phone}
                    </option>
                  ))}
                </select>
              </div>

              {selectedPatientData && (
                <div className="patient-info-display">
                  <div className="patient-info-grid">
                    <div className="info-item">
                      <span className="info-label">H·ªç t√™n:</span>
                      <span className="info-value">{selectedPatientData.full_name}</span>
                    </div>
                    <div className="info-item">
                      <span className="info-label">Tu·ªïi:</span>
                      <span className="info-value">{selectedPatientData.age || "N/A"}</span>
                    </div>
                    <div className="info-item">
                      <span className="info-label">Gi·ªõi t√≠nh:</span>
                      <span className="info-value">{selectedPatientData.gender}</span>
                    </div>
                    <div className="info-item">
                      <span className="info-label">Nh√≥m m√°u:</span>
                      <span className="info-value">{selectedPatientData.blood_type || "Ch∆∞a x√°c ƒë·ªãnh"}</span>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <div className="form-section">
              <h3>ü©∫ Tri·ªáu ch·ª©ng ch√≠nh</h3>
              <div className="form-group">
                <label>M√¥ t·∫£ tri·ªáu ch·ª©ng ch√≠nh: *</label>
                <textarea
                  value={chiefComplaint}
                  onChange={(e) => setChiefComplaint(e.target.value)}
                  rows="3"
                  placeholder="M√¥ t·∫£ chi ti·∫øt tri·ªáu ch·ª©ng ch√≠nh m√† b·ªánh nh√¢n than phi·ªÅn..."
                  required
                />
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>M·ª©c ƒë·ªô nghi√™m tr·ªçng:</label>
                  <select value={severityLevel} onChange={(e) => setSeverityLevel(e.target.value)}>
                    <option value="Nh·∫π">Nh·∫π</option>
                    <option value="Trung b√¨nh">Trung b√¨nh</option>
                    <option value="N·∫∑ng">N·∫∑ng</option>
                  </select>
                </div>
                <div className="form-group">
                  <label>M·ª©c ƒë·ªô ∆∞u ti√™n:</label>
                  <select value={priorityLevel} onChange={(e) => setPriorityLevel(e.target.value)}>
                    <option value="B√¨nh th∆∞·ªùng">B√¨nh th∆∞·ªùng</option>
                    <option value="∆Øu ti√™n">∆Øu ti√™n</option>
                    <option value="Kh·∫©n c·∫•p">Kh·∫©n c·∫•p</option>
                  </select>
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>ThÔøΩÔøΩi gian kh·ªüi ph√°t:</label>
                  <select value={onsetTime} onChange={(e) => setOnsetTime(e.target.value)}>
                    <option value="">-- Ch·ªçn th·ªùi gian --</option>
                    <option value="ƒê·ªôt ng·ªôt">ƒê·ªôt ng·ªôt</option>
                    <option value="T·ª´ t·ª´">T·ª´ t·ª´</option>
                    <option value="Kh√¥ng r√µ">Kh√¥ng r√µ</option>
                  </select>
                </div>
                <div className="form-group">
                  <label>Th·ªùi gian k√©o d√†i:</label>
                  <input
                    type="text"
                    value={duration}
                    onChange={(e) => setDuration(e.target.value)}
                    placeholder="VD: 2 gi·ªù, 1 ng√†y, 1 tu·∫ßn..."
                  />
                </div>
              </div>

              <div className="form-group">
                <label>Thang ƒëi·ªÉm ƒëau (0-10):</label>
                <input
                  type="number"
                  min="0"
                  max="10"
                  value={painScale}
                  onChange={(e) => setPainScale(e.target.value)}
                  placeholder="0 = kh√¥ng ƒëau, 10 = ƒëau kh√¥ng ch·ªãu ƒë∆∞·ª£c"
                />
              </div>
            </div>

            <div className="form-section">
              <h3>üìã Tri·ªáu ch·ª©ng c·ª• th·ªÉ</h3>
              <div className="symptoms-grid">
                {symptoms.map((symptom) => (
                  <div
                    key={symptom.code}
                    className={`symptom-card ${
                      selectedSymptoms.find((s) => s.code === symptom.code) ? "selected" : ""
                    }`}
                    onClick={() => handleSymptomToggle(symptom)}
                  >
                    <div className="symptom-name">{symptom.name}</div>
                    <div className="symptom-description">{symptom.description}</div>
                    <div className="symptom-code">{symptom.code}</div>
                  </div>
                ))}
              </div>

              <div className="form-group">
                <label>Tri·ªáu ch·ª©ng kh√°c (n·∫øu c√≥):</label>
                <textarea
                  value={customSymptom}
                  onChange={(e) => setCustomSymptom(e.target.value)}
                  rows="2"
                  placeholder="Ghi r√µ c√°c tri·ªáu ch·ª©ng kh√°c kh√¥ng c√≥ trong danh s√°ch..."
                />
              </div>
            </div>

            <div className="form-section">
              <h3>üìÑ Ghi ch√∫ b·ªï sung</h3>
              <div className="form-group">
                <label>Ghi ch√∫ th√™m:</label>
                <textarea
                  value={additionalNotes}
                  onChange={(e) => setAdditionalNotes(e.target.value)}
                  rows="3"
                  placeholder="Th√¥ng tin b·ªï sung v·ªÅ t√¨nh tr·∫°ng b·ªánh nh√¢n..."
                />
              </div>
            </div>

            <div className="form-actions">
              <button type="submit" className="btn-primary" disabled={loading}>
                {loading ? "ƒêang l∆∞u..." : "üíæ L∆∞u th√¥ng tin tri·ªáu ch·ª©ng"}
              </button>
              <button type="button" className="btn-secondary" onClick={resetForm}>
                üîÑ L√†m m·ªõi
              </button>
            </div>
          </form>
        </div>

        <div className="records-section">
          <h3>üìã L·ªãch s·ª≠ ghi nh·∫≠n tri·ªáu ch·ª©ng ({records.length})</h3>
          <div className="records-table-container">
            {records.length === 0 ? (
              <div className="empty-message">üìù Ch∆∞a c√≥ ghi nh·∫≠n tri·ªáu ch·ª©ng n√†o</div>
            ) : (
              <table className="records-table">
                <thead>
                  <tr>
                    <th>M√£ BN</th>
                    <th>T√™n b·ªánh nh√¢n</th>
                    <th>Tri·ªáu ch·ª©ng ch√≠nh</th>
                    <th>M·ª©c ƒë·ªô</th>
                    <th>∆Øu ti√™n</th>
                    <th>Ng√†y ghi nh·∫≠n</th>
                    <th>Tr·∫°ng th√°i</th>
                    <th>H√†nh ƒë·ªông</th>
                  </tr>
                </thead>
                <tbody>
                  {records.map((record, index) => (
                    <tr key={record.symptom_id || index}>
                      <td>{record.patient_code || "N/A"}</td>
                      <td>{record.patient_name || "Kh√¥ng x√°c ƒë·ªãnh"}</td>
                      <td className="chief-complaint-cell">{record.chief_complaint || "Ch∆∞a c√≥ th√¥ng tin"}</td>
                      <td>
                        <span
                          className="severity-badge"
                          style={{ backgroundColor: getSeverityColor(record.severity_level) }}
                        >
                          {record.severity_level || "Ch∆∞a x√°c ƒë·ªãnh"}
                        </span>
                      </td>
                      <td>
                        <span
                          className="priority-badge"
                          style={{ backgroundColor: getPriorityColor(record.priority_level) }}
                        >
                          {record.priority_level || "B√¨nh th∆∞·ªùng"}
                        </span>
                      </td>
                      <td>
                        {record.recorded_at
                          ? new Date(record.recorded_at).toLocaleDateString("vi-VN")
                          : "Ch∆∞a x√°c ƒë·ªãnh"}
                      </td>
                      <td>
                        <span className="status-badge">{record.status || "ƒê√£ ghi nh·∫≠n"}</span>
                      </td>
                      <td>
                        <button className="btn-view" title="Xem chi ti·∫øt" onClick={() => handleViewDetail(record)}>
                          üëÅÔ∏è
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
        </div>

        {/* Detail Modal */}
        {showDetailModal && selectedRecord && (
          <div className="modal-overlay" onClick={closeDetailModal}>
            <div className="symptom-detail-modal" onClick={(e) => e.stopPropagation()}>
              <div className="modal-header">
                <button className="close-btn" onClick={closeDetailModal}>
                  √ó
                </button>
                <h3>üìù CHI TI·∫æT TRI·ªÜU CH·ª®NG</h3>
                <p>M√£ b·ªánh nh√¢n: {selectedRecord.patient_code}</p>
              </div>

              <div className="modal-content">
                <div className="detail-section">
                  <h4>üë§ Th√¥ng tin b·ªánh nh√¢n</h4>
                  <div className="detail-grid">
                    <div className="detail-item">
                      <span className="detail-label">T√™n b·ªánh nh√¢n:</span>
                      <span className="detail-value">{selectedRecord.patient_name}</span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">M√£ b·ªánh nh√¢n:</span>
                      <span className="detail-value">{selectedRecord.patient_code}</span>
                    </div>
                  </div>
                </div>

                <div className="detail-section">
                  <h4>ü©∫ Th√¥ng tin tri·ªáu ch·ª©ng</h4>
                  <div className="detail-grid">
                    <div className="detail-item full-width">
                      <span className="detail-label">Tri·ªáu ch·ª©ng ch√≠nh:</span>
                      <span className="detail-value">{selectedRecord.chief_complaint}</span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">M·ª©c ƒë·ªô nghi√™m tr·ªçng:</span>
                      <span
                        className="detail-value severity-badge"
                        style={{ backgroundColor: getSeverityColor(selectedRecord.severity_level) }}
                      >
                        {selectedRecord.severity_level}
                      </span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">M·ª©c ƒë·ªô ∆∞u ti√™n:</span>
                      <span
                        className="detail-value priority-badge"
                        style={{ backgroundColor: getPriorityColor(selectedRecord.priority_level) }}
                      >
                        {selectedRecord.priority_level}
                      </span>
                    </div>
                    {selectedRecord.onset_time && (
                      <div className="detail-item">
                        <span className="detail-label">Th·ªùi gian kh·ªüi ph√°t:</span>
                        <span className="detail-value">{selectedRecord.onset_time}</span>
                      </div>
                    )}
                    {selectedRecord.duration && (
                      <div className="detail-item">
                        <span className="detail-label">Th·ªùi gian k√©o d√†i:</span>
                        <span className="detail-value">{selectedRecord.duration}</span>
                      </div>
                    )}
                    {selectedRecord.pain_scale && (
                      <div className="detail-item">
                        <span className="detail-label">Thang ƒëi·ªÉm ƒëau:</span>
                        <span className="detail-value">{selectedRecord.pain_scale}/10</span>
                      </div>
                    )}
                  </div>
                </div>

                {selectedRecord.selected_symptoms && (
                  <div className="detail-section">
                    <h4>üìã Tri·ªáu ch·ª©ng ƒë√£ ch·ªçn</h4>
                    <div className="selected-symptoms-display">
                      {JSON.parse(selectedRecord.selected_symptoms).map((symptom, index) => (
                        <div key={index} className="symptom-tag">
                          <span className="symptom-code">{symptom.code}</span>
                          <span className="symptom-name">{symptom.name}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {selectedRecord.custom_symptoms && (
                  <div className="detail-section">
                    <h4>üìù Tri·ªáu ch·ª©ng kh√°c</h4>
                    <p className="custom-symptoms">{selectedRecord.custom_symptoms}</p>
                  </div>
                )}

                {selectedRecord.additional_notes && (
                  <div className="detail-section">
                    <h4>üìÑ Ghi ch√∫ b·ªï sung</h4>
                    <p className="additional-notes">{selectedRecord.additional_notes}</p>
                  </div>
                )}

                <div className="detail-section">
                  <h4>‚ÑπÔ∏è Th√¥ng tin ghi nh·∫≠n</h4>
                  <div className="detail-grid">
                    <div className="detail-item">
                      <span className="detail-label">Ng∆∞·ªùi ghi nh·∫≠n:</span>
                      <span className="detail-value">{selectedRecord.recorded_by}</span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">Th·ªùi gian:</span>
                      <span className="detail-value">
                        {new Date(selectedRecord.recorded_at).toLocaleString("vi-VN")}
                      </span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">Tr·∫°ng th√°i:</span>
                      <span className="detail-value status-badge">{selectedRecord.status}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </Layout>
  )
}

export default SymptomRecord
