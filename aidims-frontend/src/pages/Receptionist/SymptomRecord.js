"use client"

import { useState, useEffect } from "react"
import Layout from "../Layout/Layout"
import "../../css/symptomRecord.css"

const SymptomRecord = () => {
  const [patients, setPatients] = useState([])
  const [selectedPatient, setSelectedPatient] = useState("")
  const [symptoms, setSymptoms] = useState([])
  const [selectedSymptoms, setSelectedSymptoms] = useState([])
  const [customSymptom, setCustomSymptom] = useState("")
  const [chiefComplaint, setChiefComplaint] = useState("")
  const [vitalSigns, setVitalSigns] = useState({
    temperature: "",
    bloodPressure: "",
    heartRate: "",
    respiratoryRate: "",
    oxygenSaturation: "",
  })
  const [records, setRecords] = useState([])

  // Load data on component mount
  useEffect(() => {
    // Load patients from localStorage
    const savedPatients = localStorage.getItem("patients")
    if (savedPatients) {
      setPatients(JSON.parse(savedPatients))
    }

    // Load symptom records
    const savedRecords = localStorage.getItem("symptomRecords")
    if (savedRecords) {
      setRecords(JSON.parse(savedRecords))
    }

    // Initialize symptoms by specialty
    const symptomsBySpecialty = {
      "Tim m·∫°ch": [
        { code: "TM01", name: "ƒêau ng·ª±c", description: "C·∫£m gi√°c ƒëau, t·ª©c ng·ª±c" },
        { code: "TM02", name: "Kh√≥ th·ªü", description: "Kh√≥ th·ªü, th·ªü g·∫•p" },
        { code: "TM03", name: "H·ªìi h·ªôp", description: "Tim ƒë·∫≠p nhanh, h·ªìi h·ªôp" },
        { code: "TM04", name: "Ph√π ch√¢n", description: "S∆∞ng ph√π v√πng ch√¢n" },
      ],
      "H√¥ h·∫•p": [
        { code: "HH01", name: "Ho khan", description: "Ho kh√¥ng c√≥ ƒë·ªùm" },
        { code: "HH02", name: "Ho c√≥ ƒë·ªùm", description: "Ho k√®m ƒë·ªùm" },
        { code: "HH03", name: "Th·ªü kh√≤ kh√®", description: "Th·ªü c√≥ ti·∫øng kh√≤ kh√®" },
        { code: "HH04", name: "Th·ªü g·∫•p", description: "Nh·ªãp th·ªü nhanh, kh√≥ th·ªü" },
      ],
      "Ti√™u h√≥a": [
        { code: "TH01", name: "ƒêau b·ª•ng", description: "ƒêau v√πng b·ª•ng" },
        { code: "TH02", name: "Bu·ªìn n√¥n", description: "C·∫£m gi√°c bu·ªìn n√¥n" },
        { code: "TH03", name: "Ti√™u ch·∫£y", description: "ƒêi ngo√†i l·ªèng nhi·ªÅu l·∫ßn" },
        { code: "TH04", name: "T√°o b√≥n", description: "Kh√≥ ƒëi ngo√†i, ƒë·∫°i ti·ªán c·ª©ng" },
      ],
      "Th·∫ßn kinh": [
        { code: "TK01", name: "ƒêau ƒë·∫ßu", description: "C·∫£m gi√°c ƒëau ƒë·∫ßu" },
        { code: "TK02", name: "Ch√≥ng m·∫∑t", description: "C·∫£m gi√°c ch√≥ng m·∫∑t, cho√°ng v√°ng" },
        { code: "TK03", name: "T√™ li·ªát", description: "M·∫•t c·∫£m gi√°c, kh√¥ng c·ª≠ ƒë·ªông ƒë∆∞·ª£c" },
        { code: "TK04", name: "Co gi·∫≠t", description: "C∆°n co gi·∫≠t kh√¥ng ki·ªÉm so√°t" },
      ],
      "C∆° x∆∞∆°ng kh·ªõp": [
        { code: "CXK01", name: "ƒêau kh·ªõp", description: "ƒêau v√πng kh·ªõp" },
        { code: "CXK02", name: "S∆∞ng kh·ªõp", description: "Kh·ªõp b·ªã s∆∞ng" },
        { code: "CXK03", name: "C·ª©ng kh·ªõp", description: "Kh·ªõp b·ªã c·ª©ng, kh√≥ c·ª≠ ƒë·ªông" },
        { code: "CXK04", name: "Y·∫øu c∆°", description: "C∆° b·∫Øp y·∫øu, m·∫•t s·ª©c" },
      ],
    }

    // Flatten all symptoms
    const allSymptoms = Object.values(symptomsBySpecialty).flat()
    setSymptoms(allSymptoms)
  }, [])

  const handleSymptomToggle = (symptom) => {
    setSelectedSymptoms((prev) => {
      const exists = prev.find((s) => s.code === symptom.code)
      if (exists) {
        return prev.filter((s) => s.code !== symptom.code)
      } else {
        return [...prev, symptom]
      }
    })
  }

  const handleVitalSignChange = (e) => {
    setVitalSigns({
      ...vitalSigns,
      [e.target.name]: e.target.value,
    })
  }

  const handleSubmit = (e) => {
    e.preventDefault()

    if (!selectedPatient) {
      alert("Vui l√≤ng ch·ªçn b·ªánh nh√¢n")
      return
    }

    if (!chiefComplaint.trim()) {
      alert("Vui l√≤ng nh·∫≠p tri·ªáu ch·ª©ng ch√≠nh")
      return
    }

    const patient = patients.find((p) => p.id === Number.parseInt(selectedPatient))
    const newRecord = {
      id: Date.now(),
      patientId: Number.parseInt(selectedPatient),
      patientName: patient.fullName,
      patientCode: patient.patientCode,
      chiefComplaint,
      symptoms: [...selectedSymptoms],
      customSymptom,
      vitalSigns,
      recordDate: new Date().toISOString(),
      status: "ƒê√£ ghi nh·∫≠n",
    }

    const updatedRecords = [...records, newRecord]
    setRecords(updatedRecords)
    localStorage.setItem("symptomRecords", JSON.stringify(updatedRecords))

    // Reset form
    setSelectedPatient("")
    setSelectedSymptoms([])
    setCustomSymptom("")
    setChiefComplaint("")
    setVitalSigns({
      temperature: "",
      bloodPressure: "",
      heartRate: "",
      respiratoryRate: "",
      oxygenSaturation: "",
    })

    alert("ƒê√£ ghi nh·∫≠n tri·ªáu ch·ª©ng th√†nh c√¥ng!")
  }

  return (
    <Layout>
      <div className="symptom-record-page">
        <div className="page-header">
          <h2>üìù Ghi nh·∫≠n Tri·ªáu ch·ª©ng</h2>
          <p>Ti·∫øp nh·∫≠n v√† ghi l·∫°i t√¨nh tr·∫°ng s·ª©c kh·ªèe ban ƒë·∫ßu c·ªßa b·ªánh nh√¢n</p>
        </div>

        <div className="symptom-form-container">
          <form onSubmit={handleSubmit} className="symptom-form">
            <div className="form-section">
              <h3>üë§ Th√¥ng tin b·ªánh nh√¢n</h3>
              <div className="form-group">
                <label>Ch·ªçn b·ªánh nh√¢n: *</label>
                <select value={selectedPatient} onChange={(e) => setSelectedPatient(e.target.value)} required>
                  <option value="">-- Ch·ªçn b·ªánh nh√¢n --</option>
                  {patients.map((patient) => (
                    <option key={patient.id} value={patient.id}>
                      {patient.patientCode} - {patient.fullName} - {patient.phone}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div className="form-section">
              <h3>ü©∫ Tri·ªáu ch·ª©ng ch√≠nh</h3>
              <div className="form-group">
                <label>M√¥ t·∫£ tri·ªáu ch·ª©ng ch√≠nh: *</label>
                <textarea
                  value={chiefComplaint}
                  onChange={(e) => setChiefComplaint(e.target.value)}
                  rows="3"
                  placeholder="M√¥ t·∫£ chi ti·∫øt tri·ªáu ch·ª©ng ch√≠nh m√† b·ªánh nh√¢n than phi·ªÅn..."
                  required
                />
              </div>
            </div>

            <div className="form-section">
              <h3>üìã Tri·ªáu ch·ª©ng c·ª• th·ªÉ</h3>
              <div className="symptoms-grid">
                {symptoms.map((symptom) => (
                  <div
                    key={symptom.code}
                    className={`symptom-card ${
                      selectedSymptoms.find((s) => s.code === symptom.code) ? "selected" : ""
                    }`}
                    onClick={() => handleSymptomToggle(symptom)}
                  >
                    <div className="symptom-name">{symptom.name}</div>
                    <div className="symptom-description">{symptom.description}</div>
                    <div className="symptom-code">{symptom.code}</div>
                  </div>
                ))}
              </div>

              <div className="form-group">
                <label>Tri·ªáu ch·ª©ng kh√°c (n·∫øu c√≥):</label>
                <textarea
                  value={customSymptom}
                  onChange={(e) => setCustomSymptom(e.target.value)}
                  rows="2"
                  placeholder="Ghi r√µ c√°c tri·ªáu ch·ª©ng kh√°c kh√¥ng c√≥ trong danh s√°ch..."
                />
              </div>
            </div>

            <div className="form-section">
              <h3>üìä Sinh hi·ªáu</h3>
              <div className="vital-signs-grid">
                <div className="form-group">
                  <label>Nhi·ªát ƒë·ªô (¬∞C):</label>
                  <input
                    type="number"
                    name="temperature"
                    value={vitalSigns.temperature}
                    onChange={handleVitalSignChange}
                    step="0.1"
                    placeholder="36.5"
                  />
                </div>
                <div className="form-group">
                  <label>Huy·∫øt √°p (mmHg):</label>
                  <input
                    type="text"
                    name="bloodPressure"
                    value={vitalSigns.bloodPressure}
                    onChange={handleVitalSignChange}
                    placeholder="120/80"
                  />
                </div>
                <div className="form-group">
                  <label>Nh·ªãp tim (l·∫ßn/ph√∫t):</label>
                  <input
                    type="number"
                    name="heartRate"
                    value={vitalSigns.heartRate}
                    onChange={handleVitalSignChange}
                    placeholder="72"
                  />
                </div>
                <div className="form-group">
                  <label>Nh·ªãp th·ªü (l·∫ßn/ph√∫t):</label>
                  <input
                    type="number"
                    name="respiratoryRate"
                    value={vitalSigns.respiratoryRate}
                    onChange={handleVitalSignChange}
                    placeholder="16"
                  />
                </div>
                <div className="form-group">
                  <label>SpO2 (%):</label>
                  <input
                    type="number"
                    name="oxygenSaturation"
                    value={vitalSigns.oxygenSaturation}
                    onChange={handleVitalSignChange}
                    placeholder="98"
                  />
                </div>
              </div>
            </div>

            <div className="form-actions">
              <button type="submit" className="btn-primary">
                üíæ L∆∞u th√¥ng tin tri·ªáu ch·ª©ng
              </button>
            </div>
          </form>
        </div>

        <div className="records-section">
          <h3>üìã L·ªãch s·ª≠ ghi nh·∫≠n tri·ªáu ch·ª©ng</h3>
          <div className="records-table-container">
            <table className="records-table">
              <thead>
                <tr>
                  <th>M√£ BN</th>
                  <th>T√™n b·ªánh nh√¢n</th>
                  <th>Tri·ªáu ch·ª©ng ch√≠nh</th>
                  <th>Ng√†y ghi nh·∫≠n</th>
                  <th>Tr·∫°ng th√°i</th>
                  <th>H√†nh ƒë·ªông</th>
                </tr>
              </thead>
              <tbody>
                {records.map((record) => (
                  <tr key={record.id}>
                    <td>{record.patientCode}</td>
                    <td>{record.patientName}</td>
                    <td className="chief-complaint-cell">{record.chiefComplaint}</td>
                    <td>{new Date(record.recordDate).toLocaleDateString("vi-VN")}</td>
                    <td>
                      <span className="status-badge">{record.status}</span>
                    </td>
                    <td>
                      <button className="btn-view" title="Xem chi ti·∫øt">
                        üëÅÔ∏è
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </Layout>
  )
}

export default SymptomRecord
