// src/services/diagnosticReportService.js
import axios from 'axios';

const BASE_URL = 'http://localhost:8080/api/diagnostic-reports';

// Create axios instance
const apiClient = axios.create({
    baseURL: BASE_URL,
    timeout: 10000,
    headers: {
        'Content-Type': 'application/json',
    }
});

// Add request interceptor
apiClient.interceptors.request.use(
    (config) => {
        console.log(`üöÄ API Call: ${config.method?.toUpperCase()} ${config.url}`);
        return config;
    },
    (error) => {
        console.error('‚ùå Request Error:', error);
        return Promise.reject(error);
    }
);

// Add response interceptor
apiClient.interceptors.response.use(
    (response) => {
        console.log('‚úÖ API Response:', response.data);
        return response;
    },
    (error) => {
        console.error('‚ùå API Error:', error.response?.data || error.message);
        return Promise.reject(error);
    }
);

const diagnosticReportService = {

    /**
     * Create new diagnostic report
     */
    async createReport(reportData) {
        try {
            console.log('üöÄ Creating report with data:', reportData);

            // Try main endpoint first
            let response;
            try {
                response = await apiClient.post('/', reportData);
            } catch (error) {
                console.log('‚ùå Main endpoint failed, trying alternative...');
                // Try alternative endpoint if main fails
                response = await apiClient.post('/create', reportData);
            }

            console.log('‚úÖ Report created successfully:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå Error creating report:', error.response?.data || error.message);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫°o b√°o c√°o');
        }
    },

    /**
     * Generate new report code
     */
    async generateReportCode() {
        try {
            const response = await apiClient.get('/generate-code');
            return response.data;
        } catch (error) {
            throw new Error('Kh√¥ng th·ªÉ t·∫°o m√£ b√°o c√°o');
        }
    },

    /**
     * Get all reports
     */
    async getAllReports() {
        try {
            const response = await apiClient.get('/');
            return response.data;
        } catch (error) {
            throw new Error('Kh√¥ng th·ªÉ l·∫•y danh s√°ch b√°o c√°o');
        }
    },

    /**
     * Get report by ID
     */
    async getReportById(reportId) {
        try {
            const response = await apiClient.get(`/${reportId}`);
            return response.data;
        } catch (error) {
            throw new Error(`Kh√¥ng th·ªÉ l·∫•y b√°o c√°o ID ${reportId}`);
        }
    },

    /**
     * Transform form data to API format
     */
    transformFormDataToApi(formData) {
        // Combine firstName and lastName for full name
        const fullName = `${formData.firstName} ${formData.lastName}`.trim();

        // Join symptoms array to string
        const symptomsText = formData.symptoms.join(', ');

        // Combine all form info into impression field to show in database
        const patientInfo = `B·ªánh nh√¢n: ${fullName}`;
        const birthInfo = formData.dateOfBirth ? `Ng√†y sinh: ${formData.dateOfBirth}` : '';
        const genderInfo = formData.gender ? `Gi·ªõi t√≠nh: ${formData.gender}` : '';
        const addressInfo = formData.address ? `ƒê·ªãa ch·ªâ: ${formData.address}` : '';
        const doctorInfo = formData.referringDoctor ? `B√°c sƒ©: ${formData.referringDoctor}` : '';
        const specialtyInfo = formData.doctorSpecialty ? `Chuy√™n khoa: ${formData.doctorSpecialty}` : '';
        const symptomsInfo = symptomsText ? `Tri·ªáu ch·ª©ng: ${symptomsText}` : '';
        const clinicalInfo = formData.clinicalHistory ? `L·ªãch s·ª≠ l√¢m s√†ng: ${formData.clinicalHistory}` : '';

        // Combine all info
        const allInfo = [patientInfo, birthInfo, genderInfo, addressInfo, doctorInfo, specialtyInfo, symptomsInfo, clinicalInfo]
            .filter(Boolean)
            .join('\n');

        return {
            resultId: 1,
            findings: formData.diagnosis || 'Ch∆∞a c√≥ k·∫øt qu·∫£ ch·∫©n ƒëo√°n',
            impression: allInfo || 'Ch∆∞a c√≥ th√¥ng tin',
            recommendations: formData.recommendations || 'Ch∆∞a c√≥ khuy·∫øn ngh·ªã',
            radiologistId: 4
            // B·ªé reportType v√† status - ƒë·ªÉ service t·ª± set default
        };
    },

    /**
     * Check API connection
     */
    async checkConnection() {
        try {
            const response = await apiClient.get('/statistics');
            return response.status === 200;
        } catch (error) {
            console.error('API Connection Failed:', error);
            return false;
        }
    }
};

export default diagnosticReportService;