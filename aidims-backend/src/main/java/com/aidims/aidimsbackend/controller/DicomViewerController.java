package com.aidims.aidimsbackend.controller;

import com.aidims.aidimsbackend.service.DicomViewerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/dicom-viewer")
@CrossOrigin(origins = "*")
public class DicomViewerController {

    @Autowired
    private DicomViewerService dicomViewerService;

    /**
     * L·∫•y t·∫•t c·∫£ DICOM t·ª´ b·∫£ng dicom_imports
     */
    @GetMapping("/all")
    public ResponseEntity<List<Map<String, Object>>> getAllDicomViewer() {
        try {
            List<Map<String, Object>> dicoms = dicomViewerService.getAllDicomViewer();
            System.out.println("‚úÖ Tr·∫£ v·ªÅ " + dicoms.size() + " DICOM records");
            return ResponseEntity.ok(dicoms);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi l·∫•y DICOM records: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * L·∫•y DICOM theo ID t·ª´ b·∫£ng dicom_imports
     */
    @GetMapping("/{id}")
    public ResponseEntity<Map<String, Object>> getDicomViewerById(@PathVariable Long id) {
        try {
            Map<String, Object> dicom = dicomViewerService.getDicomViewerById(id);
            if (dicom != null) {
                return ResponseEntity.ok(dicom);
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi l·∫•y DICOM ID " + id + ": " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * L·∫•y DICOM theo m√£ b·ªánh nh√¢n t·ª´ b·∫£ng dicom_imports
     */
    @GetMapping("/patient/{patientCode}")
    public ResponseEntity<List<Map<String, Object>>> getDicomViewerByPatient(@PathVariable String patientCode) {
        try {
            List<Map<String, Object>> dicoms = dicomViewerService.getDicomViewerByPatient(patientCode);
            return ResponseEntity.ok(dicoms);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi l·∫•y DICOM c·ªßa b·ªánh nh√¢n " + patientCode + ": " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * T√¨m ki·∫øm DICOM t·ª´ b·∫£ng dicom_imports
     */
    @GetMapping("/search")
    public ResponseEntity<List<Map<String, Object>>> searchDicomViewer(@RequestParam String keyword) {
        try {
            List<Map<String, Object>> dicoms = dicomViewerService.searchDicomViewer(keyword);
            return ResponseEntity.ok(dicoms);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi search DICOM: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * L·∫•y th·ªëng k√™ DICOM
     */
    @GetMapping("/stats")
    public ResponseEntity<Map<String, Object>> getDicomViewerStats() {
        try {
            Map<String, Object> stats = dicomViewerService.getDicomViewerStats();
            return ResponseEntity.ok(stats);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi l·∫•y th·ªëng k√™ DICOM: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * QUAN TR·ªåNG: Serve ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n trong b·∫£ng dicom_imports
     */
    @GetMapping("/image/{fileName:.+}")
    public ResponseEntity<Resource> serveImageFromDicomViewer(@PathVariable String fileName) {
        try {
            System.out.println("üîç ƒêang t√¨m file: " + fileName);

            // L·∫•y ƒë∆∞·ªùng d·∫´n th·ª±c t·∫ø t·ª´ database
            String actualFilePath = dicomViewerService.getDicomViewerFilePath(fileName);

            if (actualFilePath == null) {
                System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y file trong database: " + fileName);
                return ResponseEntity.notFound().build();
            }

            System.out.println("üìÇ ƒê∆∞·ªùng d·∫´n file: " + actualFilePath);

            // T·∫°o Path t·ª´ ƒë∆∞·ªùng d·∫´n th·ª±c t·∫ø
            Path filePath = Paths.get(actualFilePath);

            // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
            if (!Files.exists(filePath)) {
                System.err.println("‚ùå File kh√¥ng t·ªìn t·∫°i tr√™n disk: " + actualFilePath);
                return ResponseEntity.notFound().build();
            }

            // T·∫°o Resource t·ª´ file
            Resource resource = new UrlResource(filePath.toUri());

            if (resource.exists() && resource.isReadable()) {
                // X√°c ƒë·ªãnh content type
                String contentType = determineContentType(fileName);

                System.out.println("‚úÖ Serving image: " + fileName);
                System.out.println("üìÅ From path: " + actualFilePath);
                System.out.println("üé≠ Content type: " + contentType);

                return ResponseEntity.ok()
                        .contentType(MediaType.parseMediaType(contentType))
                        .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=\"" + fileName + "\"")
                        .header(HttpHeaders.CACHE_CONTROL, "max-age=3600")
                        .header("Access-Control-Allow-Origin", "*")
                        .body(resource);
            } else {
                System.err.println("‚ùå File kh√¥ng ƒë·ªçc ƒë∆∞·ª£c: " + actualFilePath);
                return ResponseEntity.notFound().build();
            }

        } catch (MalformedURLException e) {
            System.err.println("‚ùå URL kh√¥ng h·ª£p l·ªá: " + e.getMessage());
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói serve image: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * Download file t·ª´ b·∫£ng dicom_imports
     */
    @GetMapping("/download/{fileName:.+}")
    public ResponseEntity<Resource> downloadFileFromDicomViewer(@PathVariable String fileName) {
        try {
            String actualFilePath = dicomViewerService.getDicomViewerFilePath(fileName);

            if (actualFilePath == null) {
                return ResponseEntity.notFound().build();
            }

            Path filePath = Paths.get(actualFilePath);

            if (!Files.exists(filePath)) {
                return ResponseEntity.notFound().build();
            }

            Resource resource = new UrlResource(filePath.toUri());

            if (resource.exists() && resource.isReadable()) {
                System.out.println("üì• Download file: " + fileName + " from: " + actualFilePath);

                return ResponseEntity.ok()
                        .contentType(MediaType.APPLICATION_OCTET_STREAM)
                        .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + fileName + "\"")
                        .body(resource);
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (MalformedURLException e) {
            return ResponseEntity.badRequest().build();
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói download: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * Test endpoint
     */
    @GetMapping("/test")
    public ResponseEntity<String> testConnection() {
        return ResponseEntity.ok("‚úÖ DICOM Viewer API ƒëang ho·∫°t ƒë·ªông! K·∫øt n·ªëi v·ªõi b·∫£ng dicom_imports th√†nh c√¥ng.");
    }

    /**
     * Health check endpoint
     */
    @GetMapping("/health")
    public ResponseEntity<Map<String, Object>> healthCheck() {
        try {
            // Test database connection
            List<Map<String, Object>> dicoms = dicomViewerService.getAllDicomViewer();
            Map<String, Object> stats = dicomViewerService.getDicomViewerStats();

            Map<String, Object> health = Map.of(
                    "status", "healthy",
                    "timestamp", System.currentTimeMillis(),
                    "database", "connected",
                    "dicom_count", dicoms.size(),
                    "stats", stats
            );

            return ResponseEntity.ok(health);
        } catch (Exception e) {
            Map<String, Object> health = Map.of(
                    "status", "unhealthy",
                    "timestamp", System.currentTimeMillis(),
                    "error", e.getMessage()
            );

            return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE).body(health);
        }
    }

    /**
     * X√°c ƒë·ªãnh content type t·ª´ file extension
     */
    private String determineContentType(String fileName) {
        String extension = fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase();

        switch (extension) {
            case "png":
                return "image/png";
            case "jpg":
            case "jpeg":
                return "image/jpeg";
            case "gif":
                return "image/gif";
            case "bmp":
                return "image/bmp";
            case "webp":
                return "image/webp";
            case "dcm":
                return "application/dicom";
            default:
                return "application/octet-stream";
        }
    }
}