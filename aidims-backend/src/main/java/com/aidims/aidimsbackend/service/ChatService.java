package com.aidims.aidimsbackend.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;

import java.time.Duration;
import java.util.*;

@Service
public class ChatService {

    @Value("${openai.api.key:}")
    private String openaiApiKey;

    private final WebClient webClient;
    private final ObjectMapper objectMapper;

    // L∆∞u tr·ªØ l·ªãch s·ª≠ conversation ƒë·ªÉ context t·ªët h∆°n
    private final Map<String, List<Map<String, String>>> conversationHistory = new HashMap<>();

    public ChatService() {
        this.webClient = WebClient.builder()
                .baseUrl("https://api.openai.com/v1")
                .codecs(configurer -> configurer.defaultCodecs().maxInMemorySize(1024 * 1024))
                .build();
        this.objectMapper = new ObjectMapper();
    }

    public String getChatResponse(String message) {
        return getChatResponse(message, "default");
    }

    public String getChatResponse(String message, String conversationId) {
        // N·∫øu c√≥ OpenAI API key, s·ª≠ d·ª•ng GPT
        if (openaiApiKey != null && !openaiApiKey.trim().isEmpty() && !openaiApiKey.equals("your-openai-api-key-here")) {
            try {
                return getOpenAIResponse(message, conversationId);
            } catch (Exception e) {
                System.err.println("OpenAI API error: " + e.getMessage());
                // Fallback to intelligent local response
                return getIntelligentLocalResponse(message);
            }
        }

        // N·∫øu kh√¥ng c√≥ API key, s·ª≠ d·ª•ng AI local th√¥ng minh
        return getIntelligentLocalResponse(message);
    }

    private String getOpenAIResponse(String message, String conversationId) {
        try {
            // L·∫•y l·ªãch s·ª≠ conversation
            List<Map<String, String>> messages = conversationHistory.getOrDefault(conversationId, new ArrayList<>());

            // N·∫øu l√† conversation m·ªõi, th√™m system message
            if (messages.isEmpty()) {
                Map<String, String> systemMessage = new HashMap<>();
                systemMessage.put("role", "system");
                systemMessage.put("content",
                        "B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh trong h·ªá th·ªëng qu·∫£n l√Ω b·ªánh vi·ªán AIDIMS t·∫°i Vi·ªát Nam. " +
                                "H√£y tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi m·ªôt c√°ch:\n" +
                                "- Th√¢n thi·ªán, chuy√™n nghi·ªáp\n" +
                                "- Ch√≠nh x√°c v·ªÅ m·∫∑t y t·∫ø\n" +
                                "- Ph√π h·ª£p v·ªõi vƒÉn h√≥a Vi·ªát Nam\n" +
                                "- Lu√¥n khuy·∫øn kh√≠ch tham kh·∫£o b√°c sƒ© khi c·∫ßn\n" +
                                "- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát\n" +
                                "- C√≥ th·ªÉ tr·∫£ l·ªùi v·ªÅ: tri·ªáu ch·ª©ng b·ªánh, t∆∞ v·∫•n s·ª©c kh·ªèe, h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng h·ªá th·ªëng b·ªánh vi·ªán, th√¥ng tin y t·∫ø t·ªïng qu√°t\n" +
                                "- Lu√¥n ƒë∆∞a ra l·ªùi khuy√™n an to√†n v√† c√≥ tr√°ch nhi·ªám"
                );
                messages.add(systemMessage);
            }

            // Th√™m tin nh·∫Øn c·ªßa user
            Map<String, String> userMessage = new HashMap<>();
            userMessage.put("role", "user");
            userMessage.put("content", message);
            messages.add(userMessage);

            // Gi·ªõi h·∫°n l·ªãch s·ª≠ conversation (gi·ªØ system + 10 tin nh·∫Øn g·∫ßn nh·∫•t)
            if (messages.size() > 21) { // system + 20 messages
                List<Map<String, String>> trimmed = new ArrayList<>();
                trimmed.add(messages.get(0)); // Keep system message
                trimmed.addAll(messages.subList(messages.size() - 20, messages.size()));
                messages = trimmed;
            }

            // T·∫°o request body
            Map<String, Object> requestBody = new HashMap<>();
            requestBody.put("model", "gpt-3.5-turbo");
            requestBody.put("messages", messages);
            requestBody.put("max_tokens", 800);
            requestBody.put("temperature", 0.7);
            requestBody.put("top_p", 0.9);
            requestBody.put("frequency_penalty", 0.1);
            requestBody.put("presence_penalty", 0.1);

            // G·ªçi OpenAI API
            String responseBody = webClient.post()
                    .uri("/chat/completions")
                    .header("Authorization", "Bearer " + openaiApiKey)
                    .header("Content-Type", "application/json")
                    .bodyValue(requestBody)
                    .retrieve()
                    .bodyToMono(String.class)
                    .timeout(Duration.ofSeconds(30))
                    .block();

            // Parse response
            JsonNode jsonResponse = objectMapper.readTree(responseBody);
            String aiResponse = jsonResponse.get("choices").get(0).get("message").get("content").asText();

            // Th√™m response c·ªßa AI v√†o l·ªãch s·ª≠
            Map<String, String> assistantMessage = new HashMap<>();
            assistantMessage.put("role", "assistant");
            assistantMessage.put("content", aiResponse);
            messages.add(assistantMessage);

            // L∆∞u l·ªãch s·ª≠ conversation
            conversationHistory.put(conversationId, messages);

            return aiResponse;

        } catch (WebClientResponseException e) {
            System.err.println("OpenAI API HTTP error: " + e.getStatusCode() + " - " + e.getResponseBodyAsString());
            throw new RuntimeException("L·ªói k·∫øt n·ªëi v·ªõi OpenAI API: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("OpenAI API error: " + e.getMessage());
            throw new RuntimeException("L·ªói x·ª≠ l√Ω y√™u c·∫ßu: " + e.getMessage());
        }
    }

    private String getIntelligentLocalResponse(String message) {
        String lowerMessage = message.toLowerCase().trim();

        // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ tri·ªáu ch·ª©ng c·ª• th·ªÉ
        if (containsAny(lowerMessage, "s·ªët", "n√≥ng", "fever")) {
            if (containsAny(lowerMessage, "cao", "nhi·ªÅu", "li√™n t·ª•c", "kh√¥ng h·∫°")) {
                return "S·ªët cao l√† tri·ªáu ch·ª©ng nghi√™m tr·ªçng c·∫ßn ƒë∆∞·ª£c quan t√¢m:\n\n" +
                        "üå°Ô∏è **M·ª©c ƒë·ªô s·ªët:**\n" +
                        "‚Ä¢ 37.5-38¬∞C: S·ªët nh·∫π\n" +
                        "‚Ä¢ 38-39¬∞C: S·ªët v·ª´a\n" +
                        "‚Ä¢ >39¬∞C: S·ªët cao - c·∫ßn can thi·ªáp ngay\n\n" +
                        "‚ö†Ô∏è **D·∫•u hi·ªáu nguy hi·ªÉm:**\n" +
                        "‚Ä¢ S·ªët >39¬∞C k√©o d√†i >3 ng√†y\n" +
                        "‚Ä¢ K√®m kh√≥ th·ªü, ƒëau ng·ª±c\n" +
                        "‚Ä¢ Bu·ªìn n√¥n, n√¥n li√™n t·ª•c\n" +
                        "‚Ä¢ Da t√°i xanh, co gi·∫≠t\n\n" +
                        "üè• **H√†nh ƒë·ªông:**\n" +
                        "‚Ä¢ ƒê·∫øn b·ªánh vi·ªán NGAY n·∫øu c√≥ d·∫•u hi·ªáu nguy hi·ªÉm\n" +
                        "‚Ä¢ U·ªëng nhi·ªÅu n∆∞·ªõc, ngh·ªâ ng∆°i\n" +
                        "‚Ä¢ Kh√¥ng t·ª± √Ω d√πng thu·ªëc h·∫° s·ªët li·ªÅu cao\n\n" +
                        "üìû C·∫•p c·ª©u: (028) 1234-5678";
            }
            return "S·ªët l√† ph·∫£n ·ª©ng t·ª± nhi√™n c·ªßa c∆° th·ªÉ ch·ªëng l·∫°i nhi·ªÖm tr√πng:\n\n" +
                    "üå°Ô∏è **Nguy√™n nh√¢n th∆∞·ªùng g·∫∑p:**\n" +
                    "‚Ä¢ Nhi·ªÖm virus (c·∫£m, c√∫m)\n" +
                    "‚Ä¢ Nhi·ªÖm khu·∫©n\n" +
                    "‚Ä¢ Ph·∫£n ·ª©ng vaccine\n" +
                    "‚Ä¢ Stress, m·ªát m·ªèi\n\n" +
                    "üíä **ChƒÉm s√≥c t·∫°i nh√†:**\n" +
                    "‚Ä¢ U·ªëng nhi·ªÅu n∆∞·ªõc (2-3 l√≠t/ng√†y)\n" +
                    "‚Ä¢ Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß\n" +
                    "‚Ä¢ Ch∆∞·ªùm m√°t tr√°n, n√°ch\n" +
                    "‚Ä¢ M·∫∑c qu·∫ßn √°o tho√°ng m√°t\n\n" +
                    "üö® **Khi n√†o c·∫ßn ƒë·∫øn vi·ªán:**\n" +
                    "‚Ä¢ S·ªët >38.5¬∞C k√©o d√†i >2 ng√†y\n" +
                    "‚Ä¢ K√®m tri·ªáu ch·ª©ng kh√°c: kh√≥ th·ªü, ƒëau ng·ª±c, n√¥n\n\n" +
                    "B·∫°n c√≥ tri·ªáu ch·ª©ng k√®m theo n√†o kh√°c kh√¥ng?";
        }

        if (containsAny(lowerMessage, "ƒëau ƒë·∫ßu", "nh·ª©c ƒë·∫ßu", "headache", "ƒë·∫ßu")) {
            if (containsAny(lowerMessage, "d·ªØ d·ªôi", "nhi·ªÅu", "kh√¥ng ch·ªãu n·ªïi", "migraine")) {
                return "ƒêau ƒë·∫ßu d·ªØ d·ªôi c·∫ßn ƒë∆∞·ª£c ƒë√°nh gi√° c·∫©n th·∫≠n:\n\n" +
                        "üß† **C√°c lo·∫°i ƒëau ƒë·∫ßu:**\n" +
                        "‚Ä¢ **Migraine:** ƒêau m·ªôt b√™n, nh·ª©c nh·ªëi, s·ª£ √°nh s√°ng\n" +
                        "‚Ä¢ **ƒêau ƒë·∫ßu cƒÉng th·∫≥ng:** ƒêau t·ª©c, nh∆∞ b·ªã si·∫øt ch·∫∑t\n" +
                        "‚Ä¢ **ƒêau ƒë·∫ßu cluster:** ƒêau quanh m·∫Øt, r·∫•t d·ªØ d·ªôi\n\n" +
                        "‚ö†Ô∏è **D·∫•u hi·ªáu c·∫£nh b√°o:**\n" +
                        "‚Ä¢ ƒêau ƒë·∫ßu ƒë·ªôt ng·ªôt, d·ªØ d·ªôi nh·∫•t t·ª´ng c√≥\n" +
                        "‚Ä¢ K√®m s·ªët, c·ª©ng g√°y\n" +
                        "‚Ä¢ Thay ƒë·ªïi th·ªã l·ª±c, n√≥i kh√≥\n" +
                        "‚Ä¢ Y·∫øu li·ªát tay ch√¢n\n\n" +
                        "üè• **C·∫ßn kh√°m ngay n·∫øu:**\n" +
                        "‚Ä¢ ƒêau ƒë·∫ßu thay ƒë·ªïi ƒë·ªôt ng·ªôt v·ªÅ t√≠nh ch·∫•t\n" +
                        "‚Ä¢ K√®m n√¥n kh√¥ng r√µ nguy√™n nh√¢n\n" +
                        "‚Ä¢ ƒêau ƒë·∫ßu sau ch·∫•n th∆∞∆°ng\n\n" +
                        "üìû ƒê·∫∑t l·ªãch kh√°m: (028) 1234-5678";
            }
            return "ƒêau ƒë·∫ßu l√† tri·ªáu ch·ª©ng ph·ªï bi·∫øn v·ªõi nhi·ªÅu nguy√™n nh√¢n:\n\n" +
                    "üéØ **Nguy√™n nh√¢n th∆∞·ªùng g·∫∑p:**\n" +
                    "‚Ä¢ CƒÉng th·∫≥ng, stress c√¥ng vi·ªác\n" +
                    "‚Ä¢ Thi·∫øu ng·ªß, ng·ªß kh√¥ng ƒë·ªÅu\n" +
                    "‚Ä¢ M·∫•t n∆∞·ªõc, kh√¥ng ƒÉn u·ªëng ƒë·ªß\n" +
                    "‚Ä¢ Ng·ªìi sai t∆∞ th·∫ø l√¢u\n" +
                    "‚Ä¢ Thay ƒë·ªïi th·ªùi ti·∫øt\n\n" +
                    "üíÜ **C√°ch gi·∫£m ƒëau t·ª± nhi√™n:**\n" +
                    "‚Ä¢ Massage nh·∫π v√πng th√°i d∆∞∆°ng\n" +
                    "‚Ä¢ Ngh·ªâ ng∆°i trong ph√≤ng t·ªëi, y√™n tƒ©nh\n" +
                    "‚Ä¢ Ch∆∞·ªùm l·∫°nh ho·∫∑c ·∫•m (t√πy c·∫£m gi√°c)\n" +
                    "‚Ä¢ Th·ªü s√¢u, th∆∞ gi√£n\n" +
                    "‚Ä¢ U·ªëng ƒë·ªß n∆∞·ªõc\n\n" +
                    "üö® **C·∫ßn kh√°m b√°c sƒ© khi:**\n" +
                    "‚Ä¢ ƒêau ƒë·∫ßu th∆∞·ªùng xuy√™n (>2 l·∫ßn/tu·∫ßn)\n" +
                    "‚Ä¢ ƒêau ƒë·∫ßu k√®m s·ªët, bu·ªìn n√¥n\n" +
                    "‚Ä¢ Thu·ªëc gi·∫£m ƒëau kh√¥ng hi·ªáu qu·∫£\n\n" +
                    "ƒêau ƒë·∫ßu c·ªßa b·∫°n c√≥ k√®m tri·ªáu ch·ª©ng n√†o kh√°c kh√¥ng?";
        }

        if (containsAny(lowerMessage, "ho", "cough", "c·∫£m", "cold")) {
            if (containsAny(lowerMessage, "c√≥ ƒë·ªùm", "c√≥ m√°u", "kh√≥ th·ªü", "ƒë√™m")) {
                return "Ho c√≥ ƒë·ªùm/m√°u ho·∫∑c k√®m kh√≥ th·ªü l√† tri·ªáu ch·ª©ng c·∫ßn quan t√¢m:\n\n" +
                        "ü´Å **Ph√¢n lo·∫°i ho:**\n" +
                        "‚Ä¢ **Ho khan:** Kh√¥ng c√≥ ƒë·ªùm, th∆∞·ªùng do d·ªã ·ª©ng\n" +
                        "‚Ä¢ **Ho c√≥ ƒë·ªùm:** C√≥ th·ªÉ do nhi·ªÖm tr√πng\n" +
                        "‚Ä¢ **Ho c√≥ m√°u:** C·∫¶N KH√ÅM NGAY\n\n" +
                        "‚ö†Ô∏è **D·∫•u hi·ªáu nguy hi·ªÉm:**\n" +
                        "‚Ä¢ Ho ra m√°u (d√π √≠t)\n" +
                        "‚Ä¢ Kh√≥ th·ªü khi ngh·ªâ ng∆°i\n" +
                        "‚Ä¢ Ho k√©o d√†i >3 tu·∫ßn\n" +
                        "‚Ä¢ S·ª•t c√¢n kh√¥ng r√µ nguy√™n nh√¢n\n\n" +
                        "üè• **C·∫ßn ƒë·∫øn vi·ªán ngay:**\n" +
                        "‚Ä¢ Ho c√≥ m√°u t∆∞∆°i\n" +
                        "‚Ä¢ Kh√≥ th·ªü tƒÉng d·∫ßn\n" +
                        "‚Ä¢ ƒêau ng·ª±c khi th·ªü\n" +
                        "‚Ä¢ S·ªët cao k√®m ho\n\n" +
                        "üìû C·∫•p c·ª©u 24/7: (028) 1234-5678\n\n" +
                        "T√¥i khuy√™n b·∫°n n√™n ƒë·∫øn kh√°m ƒë·ªÉ ƒë∆∞·ª£c ki·ªÉm tra k·ªπ h∆°n.";
            }
            return "Ho v√† c·∫£m l·∫°nh l√† nh·ªØng v·∫•n ƒë·ªÅ s·ª©c kh·ªèe th∆∞·ªùng g·∫∑p:\n\n" +
                    "ü¶† **Nguy√™n nh√¢n ph·ªï bi·∫øn:**\n" +
                    "‚Ä¢ Virus c·∫£m l·∫°nh th√¥ng th∆∞·ªùng\n" +
                    "‚Ä¢ D·ªã ·ª©ng ph·∫•n hoa, b·ª•i\n" +
                    "‚Ä¢ Thay ƒë·ªïi th·ªùi ti·∫øt ƒë·ªôt ng·ªôt\n" +
                    "‚Ä¢ Kh√¥ng kh√≠ kh√¥, √¥ nhi·ªÖm\n\n" +
                    "üçµ **ChƒÉm s√≥c t·∫°i nh√†:**\n" +
                    "‚Ä¢ U·ªëng nhi·ªÅu n∆∞·ªõc ·∫•m (tr√† g·ª´ng, m·∫≠t ong)\n" +
                    "‚Ä¢ S√∫c mi·ªáng n∆∞·ªõc mu·ªëi sinh l√Ω\n" +
                    "‚Ä¢ Gi·ªØ ·∫•m c∆° th·ªÉ, ƒë·∫∑c bi·ªát c·ªï h·ªçng\n" +
                    "‚Ä¢ Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß\n" +
                    "‚Ä¢ Tr√°nh kh√≥i thu·ªëc, b·ª•i\n\n" +
                    "üö® **Khi n√†o c·∫ßn kh√°m:**\n" +
                    "‚Ä¢ Ho k√©o d√†i >10 ng√†y\n" +
                    "‚Ä¢ S·ªët cao k√®m ho\n" +
                    "‚Ä¢ Kh√≥ th·ªü, ƒëau ng·ª±c\n" +
                    "‚Ä¢ Ho c√≥ ƒë·ªùm v√†ng xanh\n\n" +
                    "Tri·ªáu ch·ª©ng c·ªßa b·∫°n ƒë√£ k√©o d√†i bao l√¢u r·ªìi?";
        }

        // C√¢u h·ªèi v·ªÅ ƒë·∫∑t l·ªãch v√† th·ªß t·ª•c
        if (containsAny(lowerMessage, "ƒë·∫∑t l·ªãch", "h·∫πn", "appointment", "kh√°m")) {
            return "ƒê·∫∑t l·ªãch kh√°m b·ªánh t·∫°i AIDIMS r·∫•t ƒë∆°n gi·∫£n:\n\n" +
                    "üì± **3 c√°ch ƒë·∫∑t l·ªãch:**\n" +
                    "1. **Online:** Website aidims.com ‚Üí 'ƒê·∫∑t l·ªãch kh√°m'\n" +
                    "2. **ƒêi·ªán tho·∫°i:** (028) 1234-5678 (7:00-17:00)\n" +
                    "3. **Tr·ª±c ti·∫øp:** Qu·∫ßy ti·∫øp nh·∫≠n t·∫ßng 1\n\n" +
                    "üìã **C·∫ßn chu·∫©n b·ªã:**\n" +
                    "‚Ä¢ CMND/CCCD\n" +
                    "‚Ä¢ Th·∫ª BHYT (n·∫øu c√≥)\n" +
                    "‚Ä¢ H·ªì s∆° b·ªánh √°n c≈© (n·∫øu c√≥)\n" +
                    "‚Ä¢ Danh s√°ch thu·ªëc ƒëang d√πng\n\n" +
                    "‚è∞ **Gi·ªù l√†m vi·ªác:**\n" +
                    "‚Ä¢ Th·ª© 2-6: 7:00 - 17:00\n" +
                    "‚Ä¢ Th·ª© 7: 7:00 - 12:00\n" +
                    "‚Ä¢ C·∫•p c·ª©u: 24/7\n\n" +
                    "üí° **L∆∞u √Ω:** ƒê·∫øn tr∆∞·ªõc 15 ph√∫t ƒë·ªÉ l√†m th·ªß t·ª•c\n\n" +
                    "B·∫°n mu·ªën ƒë·∫∑t l·ªãch kh√°m chuy√™n khoa n√†o?";
        }

        // C√¢u h·ªèi v·ªÅ chi ph√≠
        if (containsAny(lowerMessage, "chi ph√≠", "gi√°", "ti·ªÅn", "cost", "price")) {
            return "B·∫£ng chi ph√≠ kh√°m b·ªánh t·∫°i AIDIMS:\n\n" +
                    "üí∞ **Ph√≠ kh√°m:**\n" +
                    "‚Ä¢ Kh√°m t·ªïng qu√°t: 200,000ƒë\n" +
                    "‚Ä¢ Chuy√™n khoa tim m·∫°ch: 350,000ƒë\n" +
                    "‚Ä¢ Chuy√™n khoa th·∫ßn kinh: 350,000ƒë\n" +
                    "‚Ä¢ Chuy√™n khoa ti√™u h√≥a: 300,000ƒë\n" +
                    "‚Ä¢ Kh√°m nhi: 250,000ƒë\n\n" +
                    "üé´ **B·∫£o hi·ªÉm y t·∫ø:**\n" +
                    "‚Ä¢ BHYT h·ªó tr·ª£ 80% chi ph√≠\n" +
                    "‚Ä¢ Th·∫ª v√†ng: Mi·ªÖn ph√≠ ho√†n to√†n\n" +
                    "‚Ä¢ Ng∆∞·ªùi cao tu·ªïi >70: Gi·∫£m 20%\n\n" +
                    "üìä **D·ªãch v·ª• th√™m:**\n" +
                    "‚Ä¢ X√©t nghi·ªám m√°u: 150,000-500,000ƒë\n" +
                    "‚Ä¢ Si√™u √¢m: 200,000-400,000ƒë\n" +
                    "‚Ä¢ X-quang: 180,000-300,000ƒë\n" +
                    "‚Ä¢ CT scan: 1,200,000-2,500,000ƒë\n\n" +
                    "üìû Chi ti·∫øt: Ph√≤ng t√†i ch√≠nh (028) 1234-5679\n\n" +
                    "B·∫°n c√≥ th·∫ª BHYT kh√¥ng?";
        }

        // X·ª≠ l√Ω c√¢u ch√†o h·ªèi
        if (containsAny(lowerMessage, "xin ch√†o", "ch√†o", "hello", "hi")) {
            return "Xin ch√†o v√† ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi AIDIMS! üè•\n\n" +
                    "T√¥i l√† tr·ª£ l√Ω AI th√¥ng minh, s·∫µn s√†ng h·ªó tr·ª£ b·∫°n 24/7 v·ªÅ:\n\n" +
                    "ü©∫ **T∆∞ v·∫•n y t·∫ø:**\n" +
                    "‚Ä¢ Gi·∫£i ƒë√°p tri·ªáu ch·ª©ng b·ªánh\n" +
                    "‚Ä¢ H∆∞·ªõng d·∫´n chƒÉm s√≥c s·ª©c kh·ªèe\n" +
                    "‚Ä¢ T∆∞ v·∫•n dinh d∆∞·ª°ng c∆° b·∫£n\n\n" +
                    "üè• **D·ªãch v·ª• b·ªánh vi·ªán:**\n" +
                    "‚Ä¢ ƒê·∫∑t l·ªãch kh√°m b·ªánh\n" +
                    "‚Ä¢ Th√¥ng tin chi ph√≠, b·∫£o hi·ªÉm\n" +
                    "‚Ä¢ H∆∞·ªõng d·∫´n th·ªß t·ª•c\n\n" +
                    "üìç **Th√¥ng tin li√™n h·ªá:**\n" +
                    "‚Ä¢ ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC, TP.HCM\n" +
                    "‚Ä¢ T·ªïng ƒë√†i: (028) 1234-5678\n" +
                    "‚Ä¢ Website: aidims.com\n\n" +
                    "H√¥m nay t√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? üòä";
        }

        // C√¢u c·∫£m ∆°n
        if (containsAny(lowerMessage, "c·∫£m ∆°n", "thanks", "thank you", "c√°m ∆°n")) {
            return "R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n! üôè\n\n" +
                    "S·ª©c kh·ªèe l√† t√†i s·∫£n qu√Ω gi√° nh·∫•t, ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i b·∫•t c·ª© khi n√†o c·∫ßn thi·∫øt.\n\n" +
                    "üíô **L·ªùi nh·∫Øn t·ª´ AIDIMS:**\n" +
                    "\"Ch√∫ng t√¥i lu√¥n ƒë·ªìng h√†nh c√πng s·ª©c kh·ªèe c·ªßa b·∫°n v√† gia ƒë√¨nh\"\n\n" +
                    "üìû C·∫ßn h·ªó tr·ª£ kh·∫©n c·∫•p: (028) 1234-5678\n" +
                    "üåê Website: aidims.com\n\n" +
                    "Ch√∫c b·∫°n v√† gia ƒë√¨nh lu√¥n m·∫°nh kh·ªèe! üåü";
        }

        // Response m·∫∑c ƒë·ªãnh th√¥ng minh
        return String.format("C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª: \"%s\"\n\n" +
                        "T√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m v·ªÅ v·∫•n ƒë·ªÅ n√†y. ƒê·ªÉ ƒë∆∞a ra t∆∞ v·∫•n ch√≠nh x√°c v√† an to√†n nh·∫•t:\n\n" +
                        "üîç **B·∫°n c√≥ th·ªÉ m√¥ t·∫£ th√™m:**\n" +
                        "‚Ä¢ Tri·ªáu ch·ª©ng c·ª• th·ªÉ (n·∫øu c√≥)\n" +
                        "‚Ä¢ Th·ªùi gian b·∫Øt ƒë·∫ßu\n" +
                        "‚Ä¢ M·ª©c ƒë·ªô nghi√™m tr·ªçng\n" +
                        "‚Ä¢ C√°c y·∫øu t·ªë li√™n quan\n\n" +
                        "üè• **Ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp:**\n" +
                        "‚Ä¢ T·ªïng ƒë√†i t∆∞ v·∫•n: (028) 1234-5678\n" +
                        "‚Ä¢ C·∫•p c·ª©u 24/7: Lu√¥n s·∫µn s√†ng\n" +
                        "‚Ä¢ ƒê·∫∑t l·ªãch online: aidims.com\n\n" +
                        "üí° **L∆∞u √Ω:** V·ªõi c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe, vi·ªác kh√°m tr·ª±c ti·∫øp lu√¥n ƒë∆∞·ª£c khuy·∫øn kh√≠ch ƒë·ªÉ c√≥ ch·∫©n ƒëo√°n ch√≠nh x√°c nh·∫•t.\n\n" +
                        "B·∫°n c√≥ mu·ªën chia s·∫ª th√™m chi ti·∫øt ƒë·ªÉ t√¥i h·ªó tr·ª£ t·ªët h∆°n kh√¥ng?",
                message.length() > 50 ? message.substring(0, 50) + "..." : message);
    }

    private boolean containsAny(String text, String... keywords) {
        for (String keyword : keywords) {
            if (text.contains(keyword.toLowerCase())) {
                return true;
            }
        }
        return false;
    }

    // Method ƒë·ªÉ x√≥a conversation history (c√≥ th·ªÉ d√πng cho logout user)
    public void clearConversationHistory(String conversationId) {
        conversationHistory.remove(conversationId);
    }

    // Method ƒë·ªÉ l·∫•y th·ªëng k√™ conversation
    public int getActiveConversations() {
        return conversationHistory.size();
    }
}